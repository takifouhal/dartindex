{
  "metadata": {
    "tool_info": {
      "name": "scip-dart",
      "version": "1.5.3"
    },
    "project_root": "file:///Users/taki/Dev/Projects/Python/Sourcetrail/test_project",
    "text_document_encoding": "UTF8"
  },
  "documents": [
    {
      "relative_path": "test/utils/string_utils.dart",
      "occurrences": [
        {
          "range": [
            0,
            0,
            0
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/",
          "symbol_roles": 1,
          "syntax_kind": "IdentifierNamespace"
        },
        {
          "range": [
            0,
            6,
            17
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#",
          "symbol_roles": 1
        },
        {
          "range": [
            1,
            14,
            26
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#isValidEmail().",
          "symbol_roles": 1
        },
        {
          "range": [
            1,
            9,
            13
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`bool.dart`/bool#"
        },
        {
          "range": [
            1,
            34,
            39
          ],
          "symbol": "local 0",
          "symbol_roles": 1
        },
        {
          "range": [
            1,
            27,
            33
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            2,
            10,
            20
          ],
          "symbol": "local 1",
          "symbol_roles": 1
        },
        {
          "range": [
            2,
            23,
            29
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`regexp.dart`/RegExp#"
        },
        {
          "range": [
            5,
            11,
            21
          ],
          "symbol": "local 1"
        },
        {
          "range": [
            5,
            22,
            30
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`regexp.dart`/RegExp#hasMatch()."
        },
        {
          "range": [
            5,
            31,
            36
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            8,
            16,
            26
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#capitalize().",
          "symbol_roles": 1
        },
        {
          "range": [
            8,
            9,
            15
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            8,
            34,
            38
          ],
          "symbol": "local 2",
          "symbol_roles": 1
        },
        {
          "range": [
            8,
            27,
            33
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            9,
            8,
            12
          ],
          "symbol": "local 2"
        },
        {
          "range": [
            9,
            13,
            20
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#`<get>isEmpty`."
        },
        {
          "range": [
            9,
            29,
            33
          ],
          "symbol": "local 2"
        },
        {
          "range": [
            10,
            11,
            15
          ],
          "symbol": "local 2"
        },
        {
          "range": [
            10,
            19,
            30
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#toUpperCase()."
        },
        {
          "range": [
            10,
            35,
            39
          ],
          "symbol": "local 2"
        },
        {
          "range": [
            10,
            40,
            49
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#substring()."
        },
        {
          "range": [
            13,
            16,
            27
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#toTitleCase().",
          "symbol_roles": 1
        },
        {
          "range": [
            13,
            9,
            15
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            13,
            35,
            39
          ],
          "symbol": "local 3",
          "symbol_roles": 1
        },
        {
          "range": [
            13,
            28,
            34
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            14,
            8,
            12
          ],
          "symbol": "local 3"
        },
        {
          "range": [
            14,
            13,
            20
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#`<get>isEmpty`."
        },
        {
          "range": [
            14,
            29,
            33
          ],
          "symbol": "local 3"
        },
        {
          "range": [
            15,
            11,
            15
          ],
          "symbol": "local 3"
        },
        {
          "range": [
            15,
            16,
            21
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#split()."
        },
        {
          "range": [
            16,
            9,
            12
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`iterable.dart`/Iterable#map()."
        },
        {
          "range": [
            16,
            14,
            18
          ],
          "symbol": "local 4",
          "symbol_roles": 1
        },
        {
          "range": [
            16,
            23,
            33
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#capitalize()."
        },
        {
          "range": [
            16,
            34,
            38
          ],
          "symbol": "local 4"
        },
        {
          "range": [
            16,
            39,
            50
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#toLowerCase()."
        },
        {
          "range": [
            17,
            9,
            13
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`iterable.dart`/Iterable#join()."
        },
        {
          "range": [
            20,
            16,
            24
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#truncate().",
          "symbol_roles": 1
        },
        {
          "range": [
            20,
            9,
            15
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            20,
            32,
            36
          ],
          "symbol": "local 5",
          "symbol_roles": 1
        },
        {
          "range": [
            20,
            25,
            31
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            20,
            42,
            51
          ],
          "symbol": "local 6",
          "symbol_roles": 1
        },
        {
          "range": [
            20,
            38,
            41
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`int.dart`/int#"
        },
        {
          "range": [
            20,
            61,
            67
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#truncate().(suffix)",
          "symbol_roles": 1
        },
        {
          "range": [
            20,
            54,
            60
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            21,
            8,
            12
          ],
          "symbol": "local 5"
        },
        {
          "range": [
            21,
            13,
            19
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#`<get>length`."
        },
        {
          "range": [
            21,
            23,
            32
          ],
          "symbol": "local 6"
        },
        {
          "range": [
            21,
            41,
            45
          ],
          "symbol": "local 5"
        },
        {
          "range": [
            22,
            11,
            15
          ],
          "symbol": "local 5"
        },
        {
          "range": [
            22,
            16,
            25
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#substring()."
        },
        {
          "range": [
            22,
            29,
            38
          ],
          "symbol": "local 6"
        },
        {
          "range": [
            22,
            41,
            47
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#truncate().(suffix)"
        },
        {
          "range": [
            22,
            48,
            54
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#`<get>length`."
        },
        {
          "range": [
            22,
            58,
            64
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#truncate().(suffix)"
        },
        {
          "range": [
            25,
            16,
            23
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#slugify().",
          "symbol_roles": 1
        },
        {
          "range": [
            25,
            9,
            15
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            25,
            31,
            35
          ],
          "symbol": "local 7",
          "symbol_roles": 1
        },
        {
          "range": [
            25,
            24,
            30
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            26,
            11,
            15
          ],
          "symbol": "local 7"
        },
        {
          "range": [
            27,
            9,
            20
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#toLowerCase()."
        },
        {
          "range": [
            28,
            9,
            19
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#replaceAll()."
        },
        {
          "range": [
            28,
            20,
            26
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`regexp.dart`/RegExp#"
        },
        {
          "range": [
            29,
            9,
            19
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#replaceAll()."
        },
        {
          "range": [
            29,
            20,
            26
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`regexp.dart`/RegExp#"
        }
      ],
      "symbols": [
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/"
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#",
          "kind": "Class",
          "signature_documentation": {
            "language": "Dart",
            "text": "class StringUtils"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#isValidEmail().",
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "bool isValidEmail(String email)"
          }
        },
        {
          "symbol": "local 0",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "String email"
          }
        },
        {
          "symbol": "local 1",
          "signature_documentation": {
            "language": "Dart",
            "text": "RegExp emailRegex"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#capitalize().",
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "String capitalize(String text)"
          }
        },
        {
          "symbol": "local 2",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "String text"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#toTitleCase().",
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "String toTitleCase(String text)"
          }
        },
        {
          "symbol": "local 3",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "String text"
          }
        },
        {
          "symbol": "local 4",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "String word"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#truncate().",
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "String truncate(\n  String text,\n  int maxLength, {\n  String suffix = '...',\n})"
          }
        },
        {
          "symbol": "local 5",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "String text"
          }
        },
        {
          "symbol": "local 6",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "int maxLength"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#truncate().(suffix)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{String suffix = '...'}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#slugify().",
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "String slugify(String text)"
          }
        },
        {
          "symbol": "local 7",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "String text"
          }
        }
      ],
      "language": "Dart"
    },
    {
      "relative_path": "test/models/user.dart",
      "occurrences": [
        {
          "range": [
            0,
            0,
            0
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/",
          "symbol_roles": 1,
          "syntax_kind": "IdentifierNamespace"
        },
        {
          "range": [
            0,
            6,
            10
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#",
          "symbol_roles": 1
        },
        {
          "range": [
            1,
            8,
            14
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            1,
            15,
            17
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#id.",
          "symbol_roles": 1
        },
        {
          "range": [
            2,
            8,
            14
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            2,
            15,
            23
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#username.",
          "symbol_roles": 1
        },
        {
          "range": [
            3,
            8,
            14
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            3,
            15,
            20
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#email.",
          "symbol_roles": 1
        },
        {
          "range": [
            4,
            2,
            8
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            4,
            10,
            19
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#firstName.",
          "symbol_roles": 1
        },
        {
          "range": [
            5,
            2,
            8
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            5,
            10,
            18
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#lastName.",
          "symbol_roles": 1
        },
        {
          "range": [
            6,
            2,
            10
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`date_time.dart`/DateTime#"
        },
        {
          "range": [
            6,
            12,
            21
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#lastLogin.",
          "symbol_roles": 1
        },
        {
          "range": [
            7,
            2,
            6
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`bool.dart`/bool#"
        },
        {
          "range": [
            7,
            7,
            15
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#isActive.",
          "symbol_roles": 1
        },
        {
          "range": [
            9,
            2,
            6
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().",
          "symbol_roles": 1
        },
        {
          "range": [
            9,
            2,
            6
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#"
        },
        {
          "range": [
            10,
            18,
            20
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#id."
        },
        {
          "range": [
            10,
            18,
            20
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(id)",
          "symbol_roles": 1
        },
        {
          "range": [
            11,
            18,
            26
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#username."
        },
        {
          "range": [
            11,
            18,
            26
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(username)",
          "symbol_roles": 1
        },
        {
          "range": [
            12,
            18,
            23
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#email."
        },
        {
          "range": [
            12,
            18,
            23
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(email)",
          "symbol_roles": 1
        },
        {
          "range": [
            13,
            9,
            18
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#firstName."
        },
        {
          "range": [
            13,
            9,
            18
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(firstName)",
          "symbol_roles": 1
        },
        {
          "range": [
            14,
            9,
            17
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#lastName."
        },
        {
          "range": [
            14,
            9,
            17
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(lastName)",
          "symbol_roles": 1
        },
        {
          "range": [
            15,
            9,
            18
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#lastLogin."
        },
        {
          "range": [
            15,
            9,
            18
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(lastLogin)",
          "symbol_roles": 1
        },
        {
          "range": [
            16,
            9,
            17
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#isActive."
        },
        {
          "range": [
            16,
            9,
            17
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(isActive)",
          "symbol_roles": 1
        },
        {
          "range": [
            19,
            15,
            23
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#fromJson().",
          "symbol_roles": 1
        },
        {
          "range": [
            19,
            10,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#"
        },
        {
          "range": [
            19,
            45,
            49
          ],
          "symbol": "local 0",
          "symbol_roles": 1
        },
        {
          "range": [
            19,
            24,
            27
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`map.dart`/Map#"
        },
        {
          "range": [
            19,
            28,
            34
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            20,
            11,
            15
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#"
        },
        {
          "range": [
            21,
            6,
            8
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(id)"
        },
        {
          "range": [
            21,
            10,
            14
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            21,
            24,
            30
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            22,
            6,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(username)"
        },
        {
          "range": [
            22,
            16,
            20
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            22,
            36,
            42
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            23,
            6,
            11
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(email)"
        },
        {
          "range": [
            23,
            13,
            17
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            23,
            30,
            36
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            24,
            6,
            15
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(firstName)"
        },
        {
          "range": [
            24,
            17,
            21
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            24,
            38,
            44
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            25,
            6,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(lastName)"
        },
        {
          "range": [
            25,
            16,
            20
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            25,
            36,
            42
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            26,
            6,
            15
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(lastLogin)"
        },
        {
          "range": [
            26,
            17,
            21
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            27,
            12,
            20
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`date_time.dart`/DateTime#"
        },
        {
          "range": [
            27,
            21,
            26
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`date_time.dart`/DateTime#parse()."
        },
        {
          "range": [
            27,
            27,
            31
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            27,
            48,
            54
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            29,
            6,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(isActive)"
        },
        {
          "range": [
            29,
            16,
            20
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            29,
            36,
            40
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`bool.dart`/bool#"
        },
        {
          "range": [
            33,
            23,
            29
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#toJson().",
          "symbol_roles": 1
        },
        {
          "range": [
            33,
            2,
            5
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`map.dart`/Map#"
        },
        {
          "range": [
            33,
            6,
            12
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            35,
            12,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#id."
        },
        {
          "range": [
            36,
            18,
            26
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#username."
        },
        {
          "range": [
            37,
            15,
            20
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#email."
        },
        {
          "range": [
            38,
            19,
            28
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#firstName."
        },
        {
          "range": [
            39,
            18,
            26
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#lastName."
        },
        {
          "range": [
            40,
            19,
            28
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#lastLogin."
        },
        {
          "range": [
            40,
            30,
            45
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`date_time.dart`/DateTime#toIso8601String()."
        },
        {
          "range": [
            41,
            18,
            26
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#isActive."
        },
        {
          "range": [
            45,
            7,
            15
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().",
          "symbol_roles": 1
        },
        {
          "range": [
            45,
            2,
            6
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#"
        },
        {
          "range": [
            46,
            12,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(id)",
          "symbol_roles": 1
        },
        {
          "range": [
            46,
            4,
            10
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            47,
            12,
            20
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(username)",
          "symbol_roles": 1
        },
        {
          "range": [
            47,
            4,
            10
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            48,
            12,
            17
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(email)",
          "symbol_roles": 1
        },
        {
          "range": [
            48,
            4,
            10
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            49,
            12,
            21
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(firstName)",
          "symbol_roles": 1
        },
        {
          "range": [
            49,
            4,
            10
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            50,
            12,
            20
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(lastName)",
          "symbol_roles": 1
        },
        {
          "range": [
            50,
            4,
            10
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            51,
            14,
            23
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(lastLogin)",
          "symbol_roles": 1
        },
        {
          "range": [
            51,
            4,
            12
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`date_time.dart`/DateTime#"
        },
        {
          "range": [
            52,
            10,
            18
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(isActive)",
          "symbol_roles": 1
        },
        {
          "range": [
            52,
            4,
            8
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`bool.dart`/bool#"
        },
        {
          "range": [
            54,
            11,
            15
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#"
        },
        {
          "range": [
            55,
            6,
            8
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(id)"
        },
        {
          "range": [
            55,
            10,
            12
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(id)"
        },
        {
          "range": [
            55,
            21,
            23
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#id."
        },
        {
          "range": [
            56,
            6,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(username)"
        },
        {
          "range": [
            56,
            16,
            24
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(username)"
        },
        {
          "range": [
            56,
            33,
            41
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#username."
        },
        {
          "range": [
            57,
            6,
            11
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(email)"
        },
        {
          "range": [
            57,
            13,
            18
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(email)"
        },
        {
          "range": [
            57,
            27,
            32
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#email."
        },
        {
          "range": [
            58,
            6,
            15
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(firstName)"
        },
        {
          "range": [
            58,
            17,
            26
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(firstName)"
        },
        {
          "range": [
            58,
            35,
            44
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#firstName."
        },
        {
          "range": [
            59,
            6,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(lastName)"
        },
        {
          "range": [
            59,
            16,
            24
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(lastName)"
        },
        {
          "range": [
            59,
            33,
            41
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#lastName."
        },
        {
          "range": [
            60,
            6,
            15
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(lastLogin)"
        },
        {
          "range": [
            60,
            17,
            26
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(lastLogin)"
        },
        {
          "range": [
            60,
            35,
            44
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#lastLogin."
        },
        {
          "range": [
            61,
            6,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(isActive)"
        },
        {
          "range": [
            61,
            16,
            24
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(isActive)"
        },
        {
          "range": [
            61,
            33,
            41
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#isActive."
        }
      ],
      "symbols": [
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/"
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#",
          "kind": "Class",
          "signature_documentation": {
            "language": "Dart",
            "text": "class User"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#id.",
          "kind": "Field",
          "signature_documentation": {
            "language": "Dart",
            "text": "String id"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#username.",
          "kind": "Field",
          "signature_documentation": {
            "language": "Dart",
            "text": "String username"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#email.",
          "kind": "Field",
          "signature_documentation": {
            "language": "Dart",
            "text": "String email"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#firstName.",
          "kind": "Field",
          "signature_documentation": {
            "language": "Dart",
            "text": "String firstName"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#lastName.",
          "kind": "Field",
          "signature_documentation": {
            "language": "Dart",
            "text": "String lastName"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#lastLogin.",
          "kind": "Field",
          "signature_documentation": {
            "language": "Dart",
            "text": "DateTime lastLogin"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#isActive.",
          "kind": "Field",
          "signature_documentation": {
            "language": "Dart",
            "text": "bool isActive"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().",
          "kind": "Constructor",
          "signature_documentation": {
            "language": "Dart",
            "text": "User User({\n  required String id,\n  required String username,\n  required String email,\n  String firstName,\n  String lastName,\n  DateTime lastLogin,\n  bool isActive = true,\n})"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(id)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{required String id}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(username)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{required String username}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(email)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{required String email}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(firstName)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{String firstName}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(lastName)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{String lastName}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(lastLogin)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{DateTime lastLogin}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(isActive)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{bool isActive = true}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#fromJson().",
          "kind": "Constructor",
          "signature_documentation": {
            "language": "Dart",
            "text": "User User.fromJson(Map<String, dynamic> json)"
          }
        },
        {
          "symbol": "local 0",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "Map<String, dynamic> json"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#toJson().",
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "Map<String, dynamic> toJson()"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().",
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "User copyWith({\n  String id,\n  String username,\n  String email,\n  String firstName,\n  String lastName,\n  DateTime lastLogin,\n  bool isActive,\n})"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(id)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{String id}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(username)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{String username}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(email)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{String email}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(firstName)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{String firstName}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(lastName)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{String lastName}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(lastLogin)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{DateTime lastLogin}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(isActive)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{bool isActive}"
          }
        }
      ],
      "language": "Dart"
    },
    {
      "relative_path": "test/widget_test.dart",
      "occurrences": [
        {
          "range": [
            0,
            0,
            0
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/`widget_test.dart`/",
          "symbol_roles": 1,
          "syntax_kind": "IdentifierNamespace"
        },
        {
          "range": [
            12,
            5,
            9
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/`widget_test.dart`/main().",
          "symbol_roles": 1
        },
        {
          "range": [
            13,
            2,
            13
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/testWidgets()."
        },
        {
          "range": [
            13,
            61,
            67
          ],
          "symbol": "local 0",
          "symbol_roles": 1
        },
        {
          "range": [
            13,
            48,
            60
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/WidgetTester#"
        },
        {
          "range": [
            15,
            10,
            16
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            15,
            17,
            27
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/WidgetTester#pumpWidget()."
        },
        {
          "range": [
            15,
            34,
            39
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyApp#"
        },
        {
          "range": [
            18,
            4,
            10
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            18,
            11,
            15
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`finders.dart`/find."
        },
        {
          "range": [
            18,
            16,
            20
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`finders.dart`/CommonFinders#text()."
        },
        {
          "range": [
            18,
            27,
            41
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`matchers.dart`/findsOneWidget."
        },
        {
          "range": [
            19,
            4,
            10
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            19,
            11,
            15
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`finders.dart`/find."
        },
        {
          "range": [
            19,
            16,
            20
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`finders.dart`/CommonFinders#text()."
        },
        {
          "range": [
            19,
            27,
            39
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`matchers.dart`/findsNothing."
        },
        {
          "range": [
            22,
            10,
            16
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            22,
            17,
            20
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`controller.dart`/WidgetController#tap()."
        },
        {
          "range": [
            22,
            21,
            25
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`finders.dart`/find."
        },
        {
          "range": [
            22,
            26,
            32
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`finders.dart`/CommonFinders#byIcon()."
        },
        {
          "range": [
            22,
            33,
            38
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`icons.dart`/Icons#"
        },
        {
          "range": [
            22,
            39,
            42
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`icons.dart`/Icons#add."
        },
        {
          "range": [
            23,
            10,
            16
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            23,
            17,
            21
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/WidgetTester#pump()."
        },
        {
          "range": [
            26,
            4,
            10
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            26,
            11,
            15
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`finders.dart`/find."
        },
        {
          "range": [
            26,
            16,
            20
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`finders.dart`/CommonFinders#text()."
        },
        {
          "range": [
            26,
            27,
            39
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`matchers.dart`/findsNothing."
        },
        {
          "range": [
            27,
            4,
            10
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            27,
            11,
            15
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`finders.dart`/find."
        },
        {
          "range": [
            27,
            16,
            20
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`finders.dart`/CommonFinders#text()."
        },
        {
          "range": [
            27,
            27,
            41
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`matchers.dart`/findsOneWidget."
        }
      ],
      "symbols": [
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/`widget_test.dart`/"
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/`widget_test.dart`/main().",
          "kind": "Function",
          "signature_documentation": {
            "language": "Dart",
            "text": "void main()"
          }
        },
        {
          "symbol": "local 0",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "WidgetTester tester"
          }
        }
      ],
      "language": "Dart"
    },
    {
      "relative_path": "test/services/user_service.dart",
      "occurrences": [
        {
          "range": [
            0,
            0,
            0
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/",
          "symbol_roles": 1,
          "syntax_kind": "IdentifierNamespace"
        },
        {
          "range": [
            4,
            6,
            17
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#",
          "symbol_roles": 1
        },
        {
          "range": [
            5,
            8,
            12
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`list.dart`/List#"
        },
        {
          "range": [
            5,
            13,
            17
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#"
        },
        {
          "range": [
            5,
            19,
            25
          ],
          "symbol": "local 0",
          "symbol_roles": 1
        },
        {
          "range": [
            6,
            8,
            19
          ],
          "symbol": "local 1",
          "symbol_roles": 1
        },
        {
          "range": [
            6,
            22,
            38
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`stream_controller.dart`/StreamController#"
        },
        {
          "range": [
            6,
            39,
            43
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`list.dart`/List#"
        },
        {
          "range": [
            6,
            44,
            48
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#"
        },
        {
          "range": [
            6,
            51,
            60
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`stream_controller.dart`/StreamController#broadcast()."
        },
        {
          "range": [
            8,
            25,
            36
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#`<get>usersStream`.",
          "symbol_roles": 1
        },
        {
          "range": [
            8,
            2,
            8
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`stream.dart`/Stream#"
        },
        {
          "range": [
            8,
            9,
            13
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`list.dart`/List#"
        },
        {
          "range": [
            8,
            14,
            18
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#"
        },
        {
          "range": [
            8,
            40,
            51
          ],
          "symbol": "local 1"
        },
        {
          "range": [
            8,
            52,
            58
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`stream_controller.dart`/StreamController#`<get>stream`."
        },
        {
          "range": [
            10,
            15,
            25
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().",
          "symbol_roles": 1
        },
        {
          "range": [
            10,
            2,
            8
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#"
        },
        {
          "range": [
            10,
            9,
            13
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#"
        },
        {
          "range": [
            11,
            20,
            28
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(username)",
          "symbol_roles": 1
        },
        {
          "range": [
            11,
            13,
            19
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            12,
            20,
            25
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(email)",
          "symbol_roles": 1
        },
        {
          "range": [
            12,
            13,
            19
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            13,
            12,
            21
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(firstName)",
          "symbol_roles": 1
        },
        {
          "range": [
            13,
            4,
            10
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            14,
            12,
            20
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(lastName)",
          "symbol_roles": 1
        },
        {
          "range": [
            14,
            4,
            10
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            17,
            10,
            16
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#"
        },
        {
          "range": [
            17,
            17,
            24
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#delayed()."
        },
        {
          "range": [
            17,
            31,
            39
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`duration.dart`/Duration#"
        },
        {
          "range": [
            17,
            40,
            52
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`duration.dart`/Duration#`<constructor>`().(milliseconds)"
        },
        {
          "range": [
            19,
            9,
            20
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#"
        },
        {
          "range": [
            19,
            21,
            33
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#isValidEmail()."
        },
        {
          "range": [
            19,
            34,
            39
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(email)"
        },
        {
          "range": [
            20,
            12,
            25
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`errors.dart`/ArgumentError#"
        },
        {
          "range": [
            23,
            10,
            14
          ],
          "symbol": "local 2",
          "symbol_roles": 1
        },
        {
          "range": [
            23,
            17,
            21
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#"
        },
        {
          "range": [
            24,
            6,
            8
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(id)"
        },
        {
          "range": [
            24,
            10,
            18
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`date_time.dart`/DateTime#"
        },
        {
          "range": [
            24,
            19,
            22
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`date_time.dart`/DateTime#now()."
        },
        {
          "range": [
            24,
            25,
            47
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`date_time.dart`/DateTime#`<get>millisecondsSinceEpoch`."
        },
        {
          "range": [
            24,
            48,
            56
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`int.dart`/int#toString()."
        },
        {
          "range": [
            25,
            6,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(username)"
        },
        {
          "range": [
            25,
            16,
            24
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(username)"
        },
        {
          "range": [
            26,
            6,
            11
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(email)"
        },
        {
          "range": [
            26,
            13,
            18
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(email)"
        },
        {
          "range": [
            27,
            6,
            15
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(firstName)"
        },
        {
          "range": [
            27,
            17,
            26
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(firstName)"
        },
        {
          "range": [
            28,
            6,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(lastName)"
        },
        {
          "range": [
            28,
            16,
            24
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(lastName)"
        },
        {
          "range": [
            29,
            6,
            15
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(lastLogin)"
        },
        {
          "range": [
            29,
            17,
            25
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`date_time.dart`/DateTime#"
        },
        {
          "range": [
            29,
            26,
            29
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`date_time.dart`/DateTime#now()."
        },
        {
          "range": [
            32,
            4,
            10
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            32,
            11,
            14
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`list.dart`/List#add()."
        },
        {
          "range": [
            32,
            15,
            19
          ],
          "symbol": "local 2"
        },
        {
          "range": [
            33,
            4,
            15
          ],
          "symbol": "local 1"
        },
        {
          "range": [
            33,
            16,
            19
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`stream_controller.dart`/StreamController#add()."
        },
        {
          "range": [
            33,
            20,
            26
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            34,
            11,
            15
          ],
          "symbol": "local 2"
        },
        {
          "range": [
            37,
            16,
            27
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#getUserById().",
          "symbol_roles": 1
        },
        {
          "range": [
            37,
            2,
            8
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#"
        },
        {
          "range": [
            37,
            9,
            13
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#"
        },
        {
          "range": [
            37,
            35,
            37
          ],
          "symbol": "local 3",
          "symbol_roles": 1
        },
        {
          "range": [
            37,
            28,
            34
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            38,
            10,
            16
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#"
        },
        {
          "range": [
            38,
            17,
            24
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#delayed()."
        },
        {
          "range": [
            38,
            31,
            39
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`duration.dart`/Duration#"
        },
        {
          "range": [
            38,
            40,
            52
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`duration.dart`/Duration#`<constructor>`().(milliseconds)"
        },
        {
          "range": [
            39,
            11,
            17
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            39,
            18,
            28
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`iterable.dart`/Iterable#firstWhere()."
        },
        {
          "range": [
            39,
            30,
            34
          ],
          "symbol": "local 4",
          "symbol_roles": 1
        },
        {
          "range": [
            39,
            39,
            43
          ],
          "symbol": "local 4"
        },
        {
          "range": [
            39,
            44,
            46
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#id."
        },
        {
          "range": [
            39,
            50,
            52
          ],
          "symbol": "local 3"
        },
        {
          "range": [
            42,
            21,
            32
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#searchUsers().",
          "symbol_roles": 1
        },
        {
          "range": [
            42,
            2,
            8
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#"
        },
        {
          "range": [
            42,
            9,
            13
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`list.dart`/List#"
        },
        {
          "range": [
            42,
            14,
            18
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#"
        },
        {
          "range": [
            42,
            40,
            45
          ],
          "symbol": "local 5",
          "symbol_roles": 1
        },
        {
          "range": [
            42,
            33,
            39
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            43,
            10,
            16
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#"
        },
        {
          "range": [
            43,
            17,
            24
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#delayed()."
        },
        {
          "range": [
            43,
            31,
            39
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`duration.dart`/Duration#"
        },
        {
          "range": [
            43,
            40,
            52
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`duration.dart`/Duration#`<constructor>`().(milliseconds)"
        },
        {
          "range": [
            44,
            4,
            9
          ],
          "symbol": "local 5"
        },
        {
          "range": [
            44,
            12,
            17
          ],
          "symbol": "local 5"
        },
        {
          "range": [
            44,
            18,
            29
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#toLowerCase()."
        },
        {
          "range": [
            45,
            11,
            17
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            45,
            18,
            23
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`iterable.dart`/Iterable#where()."
        },
        {
          "range": [
            45,
            25,
            29
          ],
          "symbol": "local 6",
          "symbol_roles": 1
        },
        {
          "range": [
            46,
            8,
            12
          ],
          "symbol": "local 6"
        },
        {
          "range": [
            46,
            13,
            21
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#username."
        },
        {
          "range": [
            46,
            22,
            33
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#toLowerCase()."
        },
        {
          "range": [
            46,
            36,
            44
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#contains()."
        },
        {
          "range": [
            46,
            45,
            50
          ],
          "symbol": "local 5"
        },
        {
          "range": [
            47,
            8,
            12
          ],
          "symbol": "local 6"
        },
        {
          "range": [
            47,
            13,
            18
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#email."
        },
        {
          "range": [
            47,
            19,
            30
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#toLowerCase()."
        },
        {
          "range": [
            47,
            33,
            41
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#contains()."
        },
        {
          "range": [
            47,
            42,
            47
          ],
          "symbol": "local 5"
        },
        {
          "range": [
            48,
            9,
            13
          ],
          "symbol": "local 6"
        },
        {
          "range": [
            48,
            14,
            23
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#firstName."
        },
        {
          "range": [
            48,
            25,
            36
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#toLowerCase()."
        },
        {
          "range": [
            48,
            39,
            47
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#contains()."
        },
        {
          "range": [
            48,
            48,
            53
          ],
          "symbol": "local 5"
        },
        {
          "range": [
            49,
            9,
            13
          ],
          "symbol": "local 6"
        },
        {
          "range": [
            49,
            14,
            22
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#lastName."
        },
        {
          "range": [
            49,
            24,
            35
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#toLowerCase()."
        },
        {
          "range": [
            49,
            38,
            46
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#contains()."
        },
        {
          "range": [
            49,
            47,
            52
          ],
          "symbol": "local 5"
        },
        {
          "range": [
            50,
            6,
            12
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`iterable.dart`/Iterable#toList()."
        },
        {
          "range": [
            53,
            15,
            25
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().",
          "symbol_roles": 1
        },
        {
          "range": [
            53,
            2,
            8
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#"
        },
        {
          "range": [
            53,
            33,
            35
          ],
          "symbol": "local 7",
          "symbol_roles": 1
        },
        {
          "range": [
            53,
            26,
            32
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            54,
            12,
            20
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().(username)",
          "symbol_roles": 1
        },
        {
          "range": [
            54,
            4,
            10
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            55,
            12,
            17
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().(email)",
          "symbol_roles": 1
        },
        {
          "range": [
            55,
            4,
            10
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            56,
            12,
            21
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().(firstName)",
          "symbol_roles": 1
        },
        {
          "range": [
            56,
            4,
            10
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            57,
            12,
            20
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().(lastName)",
          "symbol_roles": 1
        },
        {
          "range": [
            57,
            4,
            10
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            59,
            10,
            16
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#"
        },
        {
          "range": [
            59,
            17,
            24
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#delayed()."
        },
        {
          "range": [
            59,
            31,
            39
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`duration.dart`/Duration#"
        },
        {
          "range": [
            59,
            40,
            52
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`duration.dart`/Duration#`<constructor>`().(milliseconds)"
        },
        {
          "range": [
            61,
            10,
            15
          ],
          "symbol": "local 8",
          "symbol_roles": 1
        },
        {
          "range": [
            61,
            18,
            24
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            61,
            25,
            35
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`list.dart`/List#indexWhere()."
        },
        {
          "range": [
            61,
            37,
            41
          ],
          "symbol": "local 9",
          "symbol_roles": 1
        },
        {
          "range": [
            61,
            46,
            50
          ],
          "symbol": "local 9"
        },
        {
          "range": [
            61,
            51,
            53
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#id."
        },
        {
          "range": [
            61,
            57,
            59
          ],
          "symbol": "local 7"
        },
        {
          "range": [
            62,
            8,
            13
          ],
          "symbol": "local 8"
        },
        {
          "range": [
            63,
            12,
            21
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`exceptions.dart`/Exception#"
        },
        {
          "range": [
            66,
            8,
            13
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().(email)"
        },
        {
          "range": [
            66,
            26,
            37
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#"
        },
        {
          "range": [
            66,
            38,
            50
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#isValidEmail()."
        },
        {
          "range": [
            66,
            51,
            56
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().(email)"
        },
        {
          "range": [
            67,
            12,
            25
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`errors.dart`/ArgumentError#"
        },
        {
          "range": [
            70,
            4,
            10
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            70,
            11,
            16
          ],
          "symbol": "local 8"
        },
        {
          "range": [
            70,
            20,
            26
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            70,
            27,
            32
          ],
          "symbol": "local 8"
        },
        {
          "range": [
            70,
            34,
            42
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith()."
        },
        {
          "range": [
            71,
            6,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(username)"
        },
        {
          "range": [
            71,
            16,
            24
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().(username)"
        },
        {
          "range": [
            72,
            6,
            11
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(email)"
        },
        {
          "range": [
            72,
            13,
            18
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().(email)"
        },
        {
          "range": [
            73,
            6,
            15
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(firstName)"
        },
        {
          "range": [
            73,
            17,
            26
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().(firstName)"
        },
        {
          "range": [
            74,
            6,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#copyWith().(lastName)"
        },
        {
          "range": [
            74,
            16,
            24
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().(lastName)"
        },
        {
          "range": [
            77,
            4,
            15
          ],
          "symbol": "local 1"
        },
        {
          "range": [
            77,
            16,
            19
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`stream_controller.dart`/StreamController#add()."
        },
        {
          "range": [
            77,
            20,
            26
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            80,
            15,
            25
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#deleteUser().",
          "symbol_roles": 1
        },
        {
          "range": [
            80,
            2,
            8
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#"
        },
        {
          "range": [
            80,
            33,
            35
          ],
          "symbol": "local 10",
          "symbol_roles": 1
        },
        {
          "range": [
            80,
            26,
            32
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            81,
            10,
            16
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#"
        },
        {
          "range": [
            81,
            17,
            24
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#delayed()."
        },
        {
          "range": [
            81,
            31,
            39
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`duration.dart`/Duration#"
        },
        {
          "range": [
            81,
            40,
            52
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`duration.dart`/Duration#`<constructor>`().(milliseconds)"
        },
        {
          "range": [
            82,
            4,
            10
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            82,
            11,
            22
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`list.dart`/List#removeWhere()."
        },
        {
          "range": [
            82,
            24,
            28
          ],
          "symbol": "local 11",
          "symbol_roles": 1
        },
        {
          "range": [
            82,
            33,
            37
          ],
          "symbol": "local 11"
        },
        {
          "range": [
            82,
            38,
            40
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#id."
        },
        {
          "range": [
            82,
            44,
            46
          ],
          "symbol": "local 10"
        },
        {
          "range": [
            83,
            4,
            15
          ],
          "symbol": "local 1"
        },
        {
          "range": [
            83,
            16,
            19
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`stream_controller.dart`/StreamController#add()."
        },
        {
          "range": [
            83,
            20,
            26
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            86,
            7,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#dispose().",
          "symbol_roles": 1
        },
        {
          "range": [
            87,
            4,
            15
          ],
          "symbol": "local 1"
        },
        {
          "range": [
            87,
            16,
            21
          ],
          "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`stream_controller.dart`/StreamController#close()."
        }
      ],
      "symbols": [
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/"
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#",
          "kind": "Class",
          "signature_documentation": {
            "language": "Dart",
            "text": "class UserService"
          }
        },
        {
          "symbol": "local 0",
          "kind": "Field",
          "signature_documentation": {
            "language": "Dart",
            "text": "List<User> _users"
          }
        },
        {
          "symbol": "local 1",
          "kind": "Field",
          "signature_documentation": {
            "language": "Dart",
            "text": "StreamController<List<User>> _controller"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#`<get>usersStream`.",
          "kind": "Property",
          "signature_documentation": {
            "language": "Dart",
            "text": "Stream<List<User>> get usersStream"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().",
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "Future<User> createUser({\n  required String username,\n  required String email,\n  String firstName,\n  String lastName,\n})"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(username)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{required String username}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(email)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{required String email}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(firstName)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{String firstName}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(lastName)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{String lastName}"
          }
        },
        {
          "symbol": "local 2",
          "signature_documentation": {
            "language": "Dart",
            "text": "User user"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#getUserById().",
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "Future<User> getUserById(String id)"
          }
        },
        {
          "symbol": "local 3",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "String id"
          }
        },
        {
          "symbol": "local 4",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "User user"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#searchUsers().",
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "Future<List<User>> searchUsers(String query)"
          }
        },
        {
          "symbol": "local 5",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "String query"
          }
        },
        {
          "symbol": "local 6",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "User user"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().",
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "Future<void> updateUser(\n  String id, {\n  String username,\n  String email,\n  String firstName,\n  String lastName,\n})"
          }
        },
        {
          "symbol": "local 7",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "String id"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().(username)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{String username}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().(email)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{String email}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().(firstName)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{String firstName}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#updateUser().(lastName)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{String lastName}"
          }
        },
        {
          "symbol": "local 8",
          "signature_documentation": {
            "language": "Dart",
            "text": "int index"
          }
        },
        {
          "symbol": "local 9",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "User user"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#deleteUser().",
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "Future<void> deleteUser(String id)"
          }
        },
        {
          "symbol": "local 10",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "String id"
          }
        },
        {
          "symbol": "local 11",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "User user"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#dispose().",
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "void dispose()"
          }
        }
      ],
      "language": "Dart"
    },
    {
      "relative_path": "test/user_management_test.dart",
      "occurrences": [
        {
          "range": [
            0,
            0,
            0
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/`user_management_test.dart`/",
          "symbol_roles": 1,
          "syntax_kind": "IdentifierNamespace"
        },
        {
          "range": [
            5,
            5,
            9
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/`user_management_test.dart`/main().",
          "symbol_roles": 1
        },
        {
          "range": [
            6,
            2,
            7
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`test_compat.dart`/group()."
        },
        {
          "range": [
            7,
            4,
            8
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`test_compat.dart`/test()."
        },
        {
          "range": [
            8,
            12,
            16
          ],
          "symbol": "local 0",
          "symbol_roles": 1
        },
        {
          "range": [
            8,
            19,
            23
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#"
        },
        {
          "range": [
            9,
            8,
            10
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(id)"
        },
        {
          "range": [
            10,
            8,
            16
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(username)"
        },
        {
          "range": [
            11,
            8,
            13
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(email)"
        },
        {
          "range": [
            12,
            8,
            17
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(firstName)"
        },
        {
          "range": [
            13,
            8,
            16
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#`<constructor>`().(lastName)"
        },
        {
          "range": [
            16,
            12,
            16
          ],
          "symbol": "local 1",
          "symbol_roles": 1
        },
        {
          "range": [
            16,
            19,
            23
          ],
          "symbol": "local 0"
        },
        {
          "range": [
            16,
            24,
            30
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#toJson()."
        },
        {
          "range": [
            17,
            12,
            24
          ],
          "symbol": "local 2",
          "symbol_roles": 1
        },
        {
          "range": [
            17,
            27,
            31
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#"
        },
        {
          "range": [
            17,
            32,
            40
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#fromJson()."
        },
        {
          "range": [
            17,
            41,
            45
          ],
          "symbol": "local 1"
        },
        {
          "range": [
            19,
            6,
            12
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            19,
            13,
            25
          ],
          "symbol": "local 2"
        },
        {
          "range": [
            19,
            26,
            28
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#id."
        },
        {
          "range": [
            19,
            30,
            36
          ],
          "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`equals_matcher.dart`/equals()."
        },
        {
          "range": [
            20,
            6,
            12
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            20,
            13,
            25
          ],
          "symbol": "local 2"
        },
        {
          "range": [
            20,
            26,
            34
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#username."
        },
        {
          "range": [
            20,
            36,
            42
          ],
          "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`equals_matcher.dart`/equals()."
        },
        {
          "range": [
            21,
            6,
            12
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            21,
            13,
            25
          ],
          "symbol": "local 2"
        },
        {
          "range": [
            21,
            26,
            31
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#email."
        },
        {
          "range": [
            21,
            33,
            39
          ],
          "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`equals_matcher.dart`/equals()."
        },
        {
          "range": [
            22,
            6,
            12
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            22,
            13,
            25
          ],
          "symbol": "local 2"
        },
        {
          "range": [
            22,
            26,
            35
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#firstName."
        },
        {
          "range": [
            22,
            37,
            43
          ],
          "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`equals_matcher.dart`/equals()."
        },
        {
          "range": [
            23,
            6,
            12
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            23,
            13,
            25
          ],
          "symbol": "local 2"
        },
        {
          "range": [
            23,
            26,
            34
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#lastName."
        },
        {
          "range": [
            23,
            36,
            42
          ],
          "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`equals_matcher.dart`/equals()."
        },
        {
          "range": [
            27,
            2,
            7
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`test_compat.dart`/group()."
        },
        {
          "range": [
            28,
            9,
            20
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#"
        },
        {
          "range": [
            28,
            21,
            32
          ],
          "symbol": "local 3",
          "symbol_roles": 1
        },
        {
          "range": [
            30,
            4,
            9
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`test_compat.dart`/setUp()."
        },
        {
          "range": [
            31,
            6,
            17
          ],
          "symbol": "local 3"
        },
        {
          "range": [
            31,
            20,
            31
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#"
        },
        {
          "range": [
            34,
            4,
            12
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`test_compat.dart`/tearDown()."
        },
        {
          "range": [
            35,
            6,
            17
          ],
          "symbol": "local 3"
        },
        {
          "range": [
            35,
            18,
            25
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#dispose()."
        },
        {
          "range": [
            38,
            4,
            8
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`test_compat.dart`/test()."
        },
        {
          "range": [
            39,
            12,
            16
          ],
          "symbol": "local 4",
          "symbol_roles": 1
        },
        {
          "range": [
            39,
            25,
            36
          ],
          "symbol": "local 3"
        },
        {
          "range": [
            39,
            37,
            47
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser()."
        },
        {
          "range": [
            40,
            8,
            16
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(username)"
        },
        {
          "range": [
            41,
            8,
            13
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(email)"
        },
        {
          "range": [
            42,
            8,
            17
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(firstName)"
        },
        {
          "range": [
            43,
            8,
            16
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(lastName)"
        },
        {
          "range": [
            46,
            6,
            12
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            46,
            13,
            17
          ],
          "symbol": "local 4"
        },
        {
          "range": [
            46,
            18,
            26
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#username."
        },
        {
          "range": [
            46,
            28,
            34
          ],
          "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`equals_matcher.dart`/equals()."
        },
        {
          "range": [
            47,
            6,
            12
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            47,
            13,
            17
          ],
          "symbol": "local 4"
        },
        {
          "range": [
            47,
            18,
            23
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/models/`user.dart`/User#email."
        },
        {
          "range": [
            47,
            25,
            31
          ],
          "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`equals_matcher.dart`/equals()."
        },
        {
          "range": [
            50,
            4,
            8
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`test_compat.dart`/test()."
        },
        {
          "range": [
            51,
            12,
            23
          ],
          "symbol": "local 3"
        },
        {
          "range": [
            51,
            24,
            34
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser()."
        },
        {
          "range": [
            52,
            8,
            16
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(username)"
        },
        {
          "range": [
            53,
            8,
            13
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(email)"
        },
        {
          "range": [
            54,
            8,
            17
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(firstName)"
        },
        {
          "range": [
            55,
            8,
            16
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(lastName)"
        },
        {
          "range": [
            58,
            12,
            23
          ],
          "symbol": "local 3"
        },
        {
          "range": [
            58,
            24,
            34
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser()."
        },
        {
          "range": [
            59,
            8,
            16
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(username)"
        },
        {
          "range": [
            60,
            8,
            13
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(email)"
        },
        {
          "range": [
            61,
            8,
            17
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(firstName)"
        },
        {
          "range": [
            62,
            8,
            16
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#createUser().(lastName)"
        },
        {
          "range": [
            65,
            12,
            19
          ],
          "symbol": "local 5",
          "symbol_roles": 1
        },
        {
          "range": [
            65,
            28,
            39
          ],
          "symbol": "local 3"
        },
        {
          "range": [
            65,
            40,
            51
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/services/`user_service.dart`/UserService#searchUsers()."
        },
        {
          "range": [
            66,
            6,
            12
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            66,
            13,
            20
          ],
          "symbol": "local 5"
        },
        {
          "range": [
            66,
            21,
            27
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`list.dart`/List#`<get>length`."
        },
        {
          "range": [
            66,
            29,
            35
          ],
          "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`equals_matcher.dart`/equals()."
        },
        {
          "range": [
            70,
            2,
            7
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`test_compat.dart`/group()."
        },
        {
          "range": [
            71,
            4,
            8
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`test_compat.dart`/test()."
        },
        {
          "range": [
            72,
            6,
            12
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            72,
            13,
            24
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#"
        },
        {
          "range": [
            72,
            25,
            37
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#isValidEmail()."
        },
        {
          "range": [
            72,
            59,
            65
          ],
          "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`core_matchers.dart`/isTrue."
        },
        {
          "range": [
            73,
            6,
            12
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            73,
            13,
            24
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#"
        },
        {
          "range": [
            73,
            25,
            37
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#isValidEmail()."
        },
        {
          "range": [
            73,
            56,
            63
          ],
          "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`core_matchers.dart`/isFalse."
        },
        {
          "range": [
            76,
            4,
            8
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`test_compat.dart`/test()."
        },
        {
          "range": [
            77,
            6,
            12
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            77,
            13,
            24
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#"
        },
        {
          "range": [
            77,
            25,
            35
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#capitalize()."
        },
        {
          "range": [
            77,
            46,
            52
          ],
          "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`equals_matcher.dart`/equals()."
        },
        {
          "range": [
            78,
            6,
            12
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            78,
            13,
            24
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#"
        },
        {
          "range": [
            78,
            25,
            36
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#toTitleCase()."
        },
        {
          "range": [
            78,
            53,
            59
          ],
          "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`equals_matcher.dart`/equals()."
        },
        {
          "range": [
            81,
            4,
            8
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`test_compat.dart`/test()."
        },
        {
          "range": [
            82,
            6,
            12
          ],
          "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect()."
        },
        {
          "range": [
            83,
            8,
            19
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#"
        },
        {
          "range": [
            83,
            20,
            27
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 test/utils/`string_utils.dart`/StringUtils#slugify()."
        },
        {
          "range": [
            84,
            8,
            14
          ],
          "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`equals_matcher.dart`/equals()."
        }
      ],
      "symbols": [
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/`user_management_test.dart`/"
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 test/`user_management_test.dart`/main().",
          "kind": "Function",
          "signature_documentation": {
            "language": "Dart",
            "text": "void main()"
          }
        },
        {
          "symbol": "local 0",
          "signature_documentation": {
            "language": "Dart",
            "text": "User user"
          }
        },
        {
          "symbol": "local 1",
          "signature_documentation": {
            "language": "Dart",
            "text": "Map<String, dynamic> json"
          }
        },
        {
          "symbol": "local 2",
          "signature_documentation": {
            "language": "Dart",
            "text": "User userFromJson"
          }
        },
        {
          "symbol": "local 3",
          "signature_documentation": {
            "language": "Dart",
            "text": "UserService userService"
          }
        },
        {
          "symbol": "local 4",
          "signature_documentation": {
            "language": "Dart",
            "text": "User user"
          }
        },
        {
          "symbol": "local 5",
          "signature_documentation": {
            "language": "Dart",
            "text": "List<User> results"
          }
        }
      ],
      "language": "Dart"
    },
    {
      "relative_path": "lib/main.dart",
      "occurrences": [
        {
          "range": [
            0,
            0,
            0
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/",
          "symbol_roles": 1,
          "syntax_kind": "IdentifierNamespace"
        },
        {
          "range": [
            2,
            5,
            9
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/main().",
          "symbol_roles": 1
        },
        {
          "range": [
            3,
            2,
            8
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`binding.dart`/runApp()."
        },
        {
          "range": [
            3,
            15,
            20
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyApp#"
        },
        {
          "range": [
            6,
            6,
            11
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyApp#",
          "symbol_roles": 1
        },
        {
          "range": [
            6,
            20,
            35
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/StatelessWidget#"
        },
        {
          "range": [
            7,
            8,
            13
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyApp#`<constructor>`().",
          "symbol_roles": 1
        },
        {
          "range": [
            7,
            8,
            13
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyApp#"
        },
        {
          "range": [
            7,
            21,
            24
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyApp#`<constructor>`().(key)",
          "symbol_roles": 1
        },
        {
          "range": [
            11,
            9,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyApp#build().",
          "symbol_roles": 1
        },
        {
          "range": [
            10,
            3,
            11
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`annotations.dart`/override."
        },
        {
          "range": [
            11,
            2,
            8
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/Widget#"
        },
        {
          "range": [
            11,
            28,
            35
          ],
          "symbol": "local 0",
          "symbol_roles": 1
        },
        {
          "range": [
            11,
            15,
            27
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/BuildContext#"
        },
        {
          "range": [
            12,
            11,
            22
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`app.dart`/MaterialApp#"
        },
        {
          "range": [
            13,
            6,
            11
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`app.dart`/MaterialApp#`<constructor>`().(title)"
        },
        {
          "range": [
            14,
            6,
            11
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`app.dart`/MaterialApp#`<constructor>`().(theme)"
        },
        {
          "range": [
            14,
            13,
            22
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`theme_data.dart`/ThemeData#"
        },
        {
          "range": [
            30,
            8,
            19
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`theme_data.dart`/ThemeData#`<constructor>`().(colorScheme)"
        },
        {
          "range": [
            30,
            21,
            32
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`color_scheme.dart`/ColorScheme#"
        },
        {
          "range": [
            30,
            33,
            41
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`color_scheme.dart`/ColorScheme#fromSeed()."
        },
        {
          "range": [
            30,
            42,
            51
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`color_scheme.dart`/ColorScheme#fromSeed().(seedColor)"
        },
        {
          "range": [
            30,
            53,
            59
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`colors.dart`/Colors#"
        },
        {
          "range": [
            30,
            60,
            70
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`colors.dart`/Colors#deepPurple."
        },
        {
          "range": [
            31,
            8,
            20
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`theme_data.dart`/ThemeData#`<constructor>`().(useMaterial3)"
        },
        {
          "range": [
            33,
            6,
            10
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`app.dart`/MaterialApp#`<constructor>`().(home)"
        },
        {
          "range": [
            33,
            18,
            28
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#"
        },
        {
          "range": [
            33,
            29,
            34
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#`<constructor>`().(title)"
        },
        {
          "range": [
            38,
            6,
            16
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#",
          "symbol_roles": 1
        },
        {
          "range": [
            38,
            25,
            39
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/StatefulWidget#"
        },
        {
          "range": [
            39,
            8,
            18
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#`<constructor>`().",
          "symbol_roles": 1
        },
        {
          "range": [
            39,
            8,
            18
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#"
        },
        {
          "range": [
            39,
            26,
            29
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#`<constructor>`().(key)",
          "symbol_roles": 1
        },
        {
          "range": [
            39,
            45,
            50
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#title."
        },
        {
          "range": [
            39,
            45,
            50
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#`<constructor>`().(title)",
          "symbol_roles": 1
        },
        {
          "range": [
            50,
            8,
            14
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#"
        },
        {
          "range": [
            50,
            15,
            20
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#title.",
          "symbol_roles": 1
        },
        {
          "range": [
            53,
            20,
            31
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#createState().",
          "symbol_roles": 1
        },
        {
          "range": [
            52,
            3,
            11
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`annotations.dart`/override."
        },
        {
          "range": [
            53,
            2,
            7
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/State#"
        },
        {
          "range": [
            53,
            8,
            18
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#"
        },
        {
          "range": [
            53,
            37,
            53
          ],
          "symbol": "local 1"
        },
        {
          "range": [
            56,
            6,
            22
          ],
          "symbol": "local 1",
          "symbol_roles": 1
        },
        {
          "range": [
            56,
            31,
            36
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/State#"
        },
        {
          "range": [
            56,
            37,
            47
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#"
        },
        {
          "range": [
            57,
            2,
            5
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`int.dart`/int#"
        },
        {
          "range": [
            57,
            6,
            14
          ],
          "symbol": "local 2",
          "symbol_roles": 1
        },
        {
          "range": [
            59,
            7,
            24
          ],
          "symbol": "local 3",
          "symbol_roles": 1
        },
        {
          "range": [
            60,
            4,
            12
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/State#setState()."
        },
        {
          "range": [
            66,
            6,
            14
          ],
          "symbol": "local 2"
        },
        {
          "range": [
            71,
            9,
            14
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/_MyHomePageState#build().",
          "symbol_roles": 1
        },
        {
          "range": [
            70,
            3,
            11
          ],
          "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`annotations.dart`/override."
        },
        {
          "range": [
            71,
            2,
            8
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/Widget#"
        },
        {
          "range": [
            71,
            28,
            35
          ],
          "symbol": "local 4",
          "symbol_roles": 1
        },
        {
          "range": [
            71,
            15,
            27
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/BuildContext#"
        },
        {
          "range": [
            78,
            11,
            19
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`scaffold.dart`/Scaffold#"
        },
        {
          "range": [
            79,
            6,
            12
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`scaffold.dart`/Scaffold#`<constructor>`().(appBar)"
        },
        {
          "range": [
            79,
            14,
            20
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`app_bar.dart`/AppBar#"
        },
        {
          "range": [
            83,
            8,
            23
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`app_bar.dart`/AppBar#`<constructor>`().(backgroundColor)"
        },
        {
          "range": [
            83,
            25,
            30
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`theme.dart`/Theme#"
        },
        {
          "range": [
            83,
            31,
            33
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`theme.dart`/Theme#of()."
        },
        {
          "range": [
            83,
            34,
            41
          ],
          "symbol": "local 4"
        },
        {
          "range": [
            83,
            43,
            54
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`theme_data.dart`/ThemeData#colorScheme."
        },
        {
          "range": [
            83,
            55,
            69
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`color_scheme.dart`/ColorScheme#`<get>inversePrimary`."
        },
        {
          "range": [
            86,
            8,
            13
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`app_bar.dart`/AppBar#`<constructor>`().(title)"
        },
        {
          "range": [
            86,
            15,
            19
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`text.dart`/Text#"
        },
        {
          "range": [
            86,
            20,
            26
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/State#`<get>widget`."
        },
        {
          "range": [
            86,
            27,
            32
          ],
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#title."
        },
        {
          "range": [
            88,
            6,
            10
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`scaffold.dart`/Scaffold#`<constructor>`().(body)"
        },
        {
          "range": [
            88,
            12,
            18
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`basic.dart`/Center#"
        },
        {
          "range": [
            91,
            8,
            13
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`basic.dart`/Center#`<constructor>`().(child)"
        },
        {
          "range": [
            91,
            15,
            21
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`basic.dart`/Column#"
        },
        {
          "range": [
            105,
            10,
            27
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`basic.dart`/Column#`<constructor>`().(mainAxisAlignment)"
        },
        {
          "range": [
            105,
            29,
            46
          ],
          "symbol": "scip-dart pub flutter . lib/src/rendering/`flex.dart`/MainAxisAlignment#"
        },
        {
          "range": [
            105,
            47,
            53
          ],
          "symbol": "scip-dart pub flutter . lib/src/rendering/`flex.dart`/MainAxisAlignment#center."
        },
        {
          "range": [
            106,
            10,
            18
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`basic.dart`/Column#`<constructor>`().(children)"
        },
        {
          "range": [
            106,
            21,
            27
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/Widget#"
        },
        {
          "range": [
            107,
            18,
            22
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`text.dart`/Text#"
        },
        {
          "range": [
            110,
            12,
            16
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`text.dart`/Text#"
        },
        {
          "range": [
            111,
            16,
            24
          ],
          "symbol": "local 2"
        },
        {
          "range": [
            112,
            14,
            19
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`text.dart`/Text#`<constructor>`().(style)"
        },
        {
          "range": [
            112,
            21,
            26
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`theme.dart`/Theme#"
        },
        {
          "range": [
            112,
            27,
            29
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`theme.dart`/Theme#of()."
        },
        {
          "range": [
            112,
            30,
            37
          ],
          "symbol": "local 4"
        },
        {
          "range": [
            112,
            39,
            48
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`theme_data.dart`/ThemeData#textTheme."
        },
        {
          "range": [
            112,
            49,
            63
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`text_theme.dart`/TextTheme#headlineMedium."
        },
        {
          "range": [
            117,
            6,
            26
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`scaffold.dart`/Scaffold#`<constructor>`().(floatingActionButton)"
        },
        {
          "range": [
            117,
            28,
            48
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`floating_action_button.dart`/FloatingActionButton#"
        },
        {
          "range": [
            118,
            8,
            17
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`floating_action_button.dart`/FloatingActionButton#`<constructor>`().(onPressed)"
        },
        {
          "range": [
            118,
            19,
            36
          ],
          "symbol": "local 3"
        },
        {
          "range": [
            119,
            8,
            15
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`floating_action_button.dart`/FloatingActionButton#`<constructor>`().(tooltip)"
        },
        {
          "range": [
            120,
            8,
            13
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`floating_action_button.dart`/FloatingActionButton#`<constructor>`().(child)"
        },
        {
          "range": [
            120,
            21,
            25
          ],
          "symbol": "scip-dart pub flutter . lib/src/widgets/`icon.dart`/Icon#"
        },
        {
          "range": [
            120,
            26,
            31
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`icons.dart`/Icons#"
        },
        {
          "range": [
            120,
            32,
            35
          ],
          "symbol": "scip-dart pub flutter . lib/src/material/`icons.dart`/Icons#add."
        }
      ],
      "symbols": [
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/"
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/main().",
          "kind": "Function",
          "signature_documentation": {
            "language": "Dart",
            "text": "void main()"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyApp#",
          "relationships": [
            {
              "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/StatelessWidget#",
              "is_implementation": true
            },
            {
              "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/Widget#",
              "is_implementation": true
            },
            {
              "symbol": "scip-dart pub flutter . lib/src/foundation/`diagnostics.dart`/DiagnosticableTree#",
              "is_implementation": true
            },
            {
              "symbol": "scip-dart pub flutter . lib/src/foundation/`diagnostics.dart`/Diagnosticable#",
              "is_implementation": true
            }
          ],
          "kind": "Class",
          "signature_documentation": {
            "language": "Dart",
            "text": "class MyApp extends StatelessWidget"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyApp#`<constructor>`().",
          "kind": "Constructor",
          "signature_documentation": {
            "language": "Dart",
            "text": "MyApp MyApp({Key key})"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyApp#`<constructor>`().(key)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{Key key}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyApp#build().",
          "relationships": [
            {
              "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/StatelessWidget#build().",
              "is_reference": true,
              "is_implementation": true
            }
          ],
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "Widget build(BuildContext context)"
          }
        },
        {
          "symbol": "local 0",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "BuildContext context"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#",
          "relationships": [
            {
              "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/StatefulWidget#",
              "is_implementation": true
            },
            {
              "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/Widget#",
              "is_implementation": true
            },
            {
              "symbol": "scip-dart pub flutter . lib/src/foundation/`diagnostics.dart`/DiagnosticableTree#",
              "is_implementation": true
            },
            {
              "symbol": "scip-dart pub flutter . lib/src/foundation/`diagnostics.dart`/Diagnosticable#",
              "is_implementation": true
            }
          ],
          "kind": "Class",
          "signature_documentation": {
            "language": "Dart",
            "text": "class MyHomePage extends StatefulWidget"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#`<constructor>`().",
          "kind": "Constructor",
          "signature_documentation": {
            "language": "Dart",
            "text": "MyHomePage MyHomePage({Key key, required String title})"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#`<constructor>`().(key)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{Key key}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#`<constructor>`().(title)",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "{required String title}"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#title.",
          "kind": "Field",
          "signature_documentation": {
            "language": "Dart",
            "text": "String title"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/MyHomePage#createState().",
          "relationships": [
            {
              "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/StatefulWidget#createState().",
              "is_reference": true,
              "is_implementation": true
            }
          ],
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "State<MyHomePage> createState()"
          }
        },
        {
          "symbol": "local 1",
          "relationships": [
            {
              "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/State#",
              "is_implementation": true
            },
            {
              "symbol": "scip-dart pub flutter . lib/src/foundation/`diagnostics.dart`/Diagnosticable#",
              "is_implementation": true
            }
          ],
          "kind": "Class",
          "signature_documentation": {
            "language": "Dart",
            "text": "class _MyHomePageState extends State<MyHomePage>"
          }
        },
        {
          "symbol": "local 2",
          "kind": "Field",
          "signature_documentation": {
            "language": "Dart",
            "text": "int _counter"
          }
        },
        {
          "symbol": "local 3",
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "void _incrementCounter()"
          }
        },
        {
          "symbol": "scip-dart pub test_project 1.0.0+1 lib/`main.dart`/_MyHomePageState#build().",
          "relationships": [
            {
              "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/State#build().",
              "is_reference": true,
              "is_implementation": true
            }
          ],
          "kind": "Method",
          "signature_documentation": {
            "language": "Dart",
            "text": "Widget build(BuildContext context)"
          }
        },
        {
          "symbol": "local 4",
          "kind": "Parameter",
          "signature_documentation": {
            "language": "Dart",
            "text": "BuildContext context"
          }
        }
      ],
      "language": "Dart"
    }
  ],
  "external_symbols": [
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`bool.dart`/bool#",
      "documentation": [
        "The reserved words `true` and `false` denote objects that are the only two\ninstances of this class.\nIt is a compile-time error for a class to attempt to extend or implement\nbool."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "final class bool"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#",
      "documentation": [
        "A sequence of UTF-16 code units.\nStrings are mainly used to represent text. A character may be represented by\nmultiple code points, each code point consisting of one or two code\nunits. For example, the Papua New Guinea flag character requires four code\nunits to represent two code points, but should be treated like a single\ncharacter: \"\ud83c\uddf5\ud83c\uddec\". Platforms that do not support the flag character may show\nthe letters \"PG\" instead. If the code points are swapped, it instead becomes\nthe Guadeloupe flag \"\ud83c\uddec\ud83c\uddf5\" (\"GP\").\nA string can be either single or multiline. Single line strings are\nwritten using matching single or double quotes, and multiline strings are\nwritten using triple quotes. The following are all valid Dart strings:\n```dart\n'Single quotes';\n\"Double quotes\";\n'Double quotes in \"single\" quotes';\n\"Single quotes in 'double' quotes\";\n'''A\nmultiline\nstring''';\n\"\"\"\nAnother\nmultiline\nstring\"\"\";\n```\nStrings are immutable. Although you cannot change a string, you can perform\nan operation on a string which creates a new string:\n```dart\nconst string = 'Dart is fun';\nprint(string.substring(0, 4)); // 'Dart'\n```\nYou can use the plus (`+`) operator to concatenate strings:\n```dart\nconst string = 'Dart ' + 'is ' + 'fun!';\nprint(string); // 'Dart is fun!'\n```\nAdjacent string literals are concatenated automatically:\n```dart\nconst string = 'Dart ' 'is ' 'fun!';\nprint(string); // 'Dart is fun!'\n```\nYou can use `${}` to interpolate the value of Dart expressions\nwithin strings. The curly braces can be omitted when evaluating identifiers:\n```dart\nconst string = 'dartlang';\nprint('$string has ${string.length} letters'); // dartlang has 8 letters\n```\nA string is represented by a sequence of Unicode UTF-16 code units\naccessible through the [codeUnitAt] or the [codeUnits] members:\n```dart\nconst string = 'Dart';\nfinal firstCodeUnit = string.codeUnitAt(0);\nprint(firstCodeUnit); // 68, aka U+0044, the code point for 'D'.\nfinal allCodeUnits = string.codeUnits;\nprint(allCodeUnits); // [68, 97, 114, 116]\n```\nA string representation of the individual code units is accessible through\nthe index operator:\n```dart\nconst string = 'Dart';\nfinal charAtIndex = string[0];\nprint(charAtIndex); // 'D'\n```\nThe characters of a string are encoded in UTF-16. Decoding UTF-16, which\ncombines surrogate pairs, yields Unicode code points. Following a similar\nterminology to Go, Dart uses the name 'rune' for an integer representing a\nUnicode code point. Use the [runes] property to get the runes of a string:\n```dart\nconst string = 'Dart';\nfinal runes = string.runes.toList();\nprint(runes); // [68, 97, 114, 116]\n```\nFor a character outside the Basic Multilingual Plane (plane 0) that is\ncomposed of a surrogate pair, [runes] combines the pair and returns a\nsingle integer. For example, the Unicode character for a\nmusical G-clef ('\ud834\udd1e') with rune value 0x1D11E consists of a UTF-16 surrogate\npair: `0xD834` and `0xDD1E`. Using [codeUnits] returns the surrogate pair,\nand using `runes` returns their combined value:\n```dart\nconst clef = '\\u{1D11E}';\nfor (final item in clef.codeUnits) {\nprint(item.toRadixString(16));\n// d834\n// dd1e\n}\nfor (final item in clef.runes) {\nprint(item.toRadixString(16)); // 1d11e\n}\n```\nThe `String` class cannot be extended or implemented. Attempting to do so\nyields a compile-time error.\n## Other resources\n* [StringBuffer] to efficiently build a string incrementally.\n* [RegExp] to work with regular expressions.\n* [Strings and regular expressions](https://dart.dev/guides/libraries/library-tour#strings-and-regular-expressions)"
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract final class String implements Comparable<String>, Pattern"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`regexp.dart`/RegExp#",
      "documentation": [
        "A regular expression pattern.\nRegular expressions (abbreviated as regex or regexp)\nconsist of a sequence of characters that specify\na match-checking algorithm for text _inputs_.\nApplying a regexp to an input text results either in the regexp matching,\nor accepting, the text, or the text being rejected.\nWhen the regexp matches the text, it further provides some information\nabout *how* it matched the text.\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions.\nTo learn more about JavaScript regular expressions, see\n<https://ecma-international.org/ecma-262/9.0/#sec-regexp-regular-expression-objects>.\nDart provides the basic regexp matching algorithm as [matchAsPrefix],\nwhich checks if the regexp matches a part of the input starting\nat a specific position.\nIf the regexp matches, Dart returns the details of the match as a\n[RegExpMatch].\nYou can build all the other methods of [RegExp] from that basic match\ncheck.\nThe most common use of a regexp is to *search* for a match in the input.\nThe [firstMatch] method provides this functionality.\nThis method searches a string for the first position where the regexp\nmatches.\nAgain, if a match is found, Dart returns its details as a [RegExpMatch].\nThe following example finds the first match of a regular expression in\na string.\n```dart\nRegExp exp = RegExp(r'(\\w+)');\nString str = 'Parse my string';\nRegExpMatch? match = exp.firstMatch(str);\nprint(match![0]); // \"Parse\"\n```\nUse [allMatches] to look for all matches of a regular expression in\na string.\nThe following example finds all matches of a regular expression in\na string.\n```dart\nRegExp exp = RegExp(r'(\\w+)');\nString str = 'Parse my string';\nIterable<RegExpMatch> matches = exp.allMatches(str);\nfor (final m in matches) {\nprint(m[0]);\n}\n```\nThe output of the example is:\n```\nParse\nmy\nstring\n```\nThe preceding examples use a _raw string_,\na specific string type that prefixes the string literal with `r`.\nUse a raw string to treat each character, including `\\` and `$`,\nin a string as a literal character. Each character then gets passed\nto the [RegExp] parser.\nYou should use a raw string as the argument to the\n[RegExp] constructor.\n**Performance Notice**: Regular expressions do not resolve issues\nmagically.\nAnyone can write a regexp that performs inefficiently when\napplied to some string inputs.\nOften, such a regexp will perform well enough on small or common\ninputs, but have pathological performance on large and uncommon inputs.\nThis inconsistent behavior makes performance issues harder to detect\nin testing.\nA regexp might not find text any faster than using `String` operations\nto inspect a string.\nThe strength of regexp comes from the ability to specify\n*somewhat* complicated patterns in very few characters.\nThese regexps provide reasonable efficiency in most common cases.\nThis conciseness comes at a cost of readability.\nDue to their syntactic complexity, regexes cannot be considered\nself documenting.\nDart regexps implement the ECMAScript RegExp specification.\nThis specification provides a both common and well-known regexp behavior.\nWhen compiling Dart for the web, the compiled code can use the browser\u2019s\nregexp implementation.\nThe specification defines ECMAScript regexp behavior using *backtracking*.\nWhen a regexp can choose between different ways to match,\nit tries each way in the order given in the pattern.\nFor example: `RegExp(r\"(foo|bar)baz\")` wants to check for `foo` or `bar`,\nso it checks for `foo` first.\nIf continuing along that path doesn't match the input,\nthe regexp implementation *backtracks*.\nThe implementation resets to the original state from before\nchecking for `foo`,\nforgetting all the work it has done after that,\nand then tries the next choice; `bar` in this example.\nThe specification defines these choices\nand the order in which they must be attempted.\nIf a regexp could match an input in more than one way,\nthe order of the choices decides which match the regexp returns.\nCommonly used regexps order their matching choices to ensure\na specific result.\nThe ECMAScript regexp specification limits how Dart\ncan implement regular expressions.\nIt must be a backtracking implementation which checks choices in\na specific order.\nDart cannot choose a different regexp implementation,\nbecause then regexp matching would behave differently.\nThe backtracking approach works, but at a cost.\nFor some regexps and some inputs,\nfinding a *correct* match can take a *lot* of tries.\nIt can take even more tries to reject an input\nthat the regexp *almost* matches.\nA well-known dangerous regexp pattern comes from\nnesting quantifiers like `*`:\n```dart\nvar re = RegExp(r\"^(a*|b)*c\");\nprint(re.hasMatch(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"));\n```\nThe regexp pattern doesn't match the input string of only `a`s\nas the input doesn\u2019t contain the required `c`.\nThere exists an _exponential_ number of different ways for `(a*|b)*`\nto match all the `a`s.\nThe backtracking regexp implementation tries *all* of them\nbefore deciding that none of those can lead to a complete match.\nEach extra `a` added to the input doubles the time the regexp\ntakes to return `false`.\n(When backtracking has this exponential potential, it is called\n[\u201ccatastrophic backtracking\u201d](https://www.google.com/search?q=regexp+catastrophic+backtracking)).\nSequential quantifiers provide another dangerous pattern,\nbut they provide \u201conly\u201d polynomial complexity.\n```dart\n// Like `\\w*-\\d`, but check for `b` and `c` in that order.\nvar re = RegExp(r\"^\\w*(b)?\\w*(c)?\\w*-\\d\");\nprint(re.hasMatch(\"a\" * 512));\n```\nAgain the input doesn\u2019t match, but `RegExp` must try *n*<sup>3</sup> ways\nto match the *n* `a`s _before_ deciding that.\nDoubling the input\u2019s length increases the time to return `false`\n_eightfold_.\nThis exponent increases with the number of sequential quantifiers.\nBoth of these patterns look trivial when reduced to such simple regexps.\nHowever, these \"trivial\" patterns often arise as parts of\nmore complicated regular expressions,\nwhere your ability to find the problem gets more difficult.\nIn general, if a regexp has potential for *super-linear complexity*,\nyou can craft an input that takes an inordinate amount of time to search.\nThese patterns can then be used for [denial of service attacks](https://en.wikipedia.org/wiki/ReDoS)\nif you apply vulnerable regexp patterns to user-provided inputs.\nNo guaranteed solution exists for this problem.\nBe careful to not use regexps with super-linear behavior\nwhere the program may match that regexp against inputs\nwith no guaranteed match.\nRules of thumb to avoid regexps with super-linear execution time include:\n* Whenever the regexp has a choice, try to make sure\nthat the choice can be made based on the next character\n(or very limited look-ahead).\nThis limits the need to perform a lot of computation along both choices.\n* When using quantifiers, ensure that the same string cannot match\nboth one and more-than-one iteration of the quantifier's\nregular expression.\n(For `(a*|b)*`, the string `\"aa\"` can match both\n`(a*|b){1}` and `(a*|b){2}`.)\n* Most uses of Dart regular expressions *search* for a match,\nfor example using [firstMatch].\nIf you do not *anchor* the pattern\nto the start of a line or input using `^`,\nthis search acts as if the regexp began with an implicit `[^]*`.\nStarting your actual regular expression with `.*`\nthen results in potential quadratic behavior for the search.\nUse anchors or [matchAsPrefix] where appropriate,\nor avoid starting the regexp with a quantified pattern.\n* *For experts only:* Neither Dart nor ECMAScript have general\n[\u201catomic grouping\u201d](https://github.com/tc39/proposal-regexp-atomic-operators).\nOther regular expression dialects use this to limit backtracking.\nIf an atomic capture group succeeds once,\nthe regexp cannot backtrack into the same match later.\nAs lookarounds also serve as atomic groups,\nsomething similar can be achieved using a *lookahead*:\n`var re = RegExp(r\"^(?=((a*|b)*))\\1d\");`\nThe preceding example does the same inefficient matching of `(a*|b)*`.\nOnce the regexp has matched as far as possible,\nit completes the positive lookahead.\nThen it skips what the lookahead matched using a back-reference.\nAfter that, it can no longer backtrack\nand try other combinations of `a`s.\nTry to reduce how many ways the regexp can match the same string.\nThat reduces the number of possible backtracks performed\nwhen the regexp does not find a match.\nSeveral guides to [improving the performance of regular expressions](https://www.google.com/search?q=performance+of+regular+expressions)\nexist on the internet. Use these as inspirations, too."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract interface class RegExp implements Pattern"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`regexp.dart`/RegExp#hasMatch().",
      "documentation": [
        "Checks whether this regular expression has a match in the [input].\n```dart\nvar string = 'Dash is a bird';\nvar regExp = RegExp(r'(humming)?bird');\nvar match = regExp.hasMatch(string); // true\nregExp = RegExp(r'dog');\nmatch = regExp.hasMatch(string); // false\n```"
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "bool hasMatch(String input)"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#`<get>isEmpty`.",
      "documentation": [
        "Whether this string is empty."
      ],
      "kind": "Property",
      "signature_documentation": {
        "language": "Dart",
        "text": "bool get isEmpty"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#toUpperCase().",
      "documentation": [
        "Converts all characters in this string to upper case.\nIf the string is already in all upper case, this method returns `this`.\n```dart\n'alphabet'.toUpperCase(); // 'ALPHABET'\n'ABC'.toUpperCase(); // 'ABC'\n```\nThis function uses the language independent Unicode mapping and thus only\nworks in some languages."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "String toUpperCase()"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#substring().",
      "documentation": [
        "The substring of this string from [start], inclusive, to [end], exclusive.\nExample:\n```dart\nconst string = 'dartlang';\nvar result = string.substring(1); // 'artlang'\nresult = string.substring(1, 4); // 'art'\n```\nBoth [start] and [end] must be non-negative and no greater than [length];\n[end], if provided, must be greater than or equal to [start]."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "String substring(int start, [int end])"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#split().",
      "documentation": [
        "Splits the string at matches of [pattern] and returns a list of substrings.\nFinds all the matches of `pattern` in this string,\nas by using [Pattern.allMatches],\nand returns the list of the substrings between the matches,\nbefore the first match, and after the last match.\n```dart\nconst string = 'Hello world!';\nfinal splitted = string.split(' ');\nprint(splitted); // [Hello, world!];\n```\nIf the pattern doesn't match this string at all,\nthe result is always a list containing only the original string.\nIf the [pattern] is a [String], then it's always the case that:\n```dart\nstring.split(pattern).join(pattern) == string\n```\nIf the first match is an empty match at the start of the string,\nthe empty substring before it is not included in the result.\nIf the last match is an empty match at the end of the string,\nthe empty substring after it is not included in the result.\nIf a match is empty, and it immediately follows a previous\nmatch (it starts at the position where the previous match ended),\nthen the empty substring between the two matches is not\nincluded in the result.\n```dart\nconst string = 'abba';\nfinal re = RegExp(r'b*');\n// re.allMatches(string) will find four matches:\n// * empty match before first \"a\".\n// * match of \"bb\"\n// * empty match after \"bb\", before second \"a\"\n// * empty match after second \"a\".\nprint(string.split(re)); // [a, a]\n```\nA non-empty match at the start or end of the string, or after another\nmatch, is not treated specially, and will introduce empty substrings\nin the result:\n```dart\nconst string = 'abbaa';\nfinal splitted = string.split('a'); // ['', 'bb', '', '']\n```\nIf this string is the empty string, the result is an empty list\nif `pattern` matches the empty string, since the empty string\nbefore and after the first-and-last empty match are not included.\n(It is still a list containing the original empty string `[\"\"]`\nif the pattern doesn't match).\n```dart\nconst string = '';\nprint(string.split('')); // []\nprint(string.split('a')); // []\n```\nSplitting with an empty pattern splits the string into single-code unit\nstrings.\n```dart\nconst string = 'Pub';\nprint(string.split('')); // [P, u, b]\n// Same as:\nvar codeUnitStrings = [\nfor (final unit in string.codeUnits) String.fromCharCode(unit)\n];\nprint(codeUnitStrings); // [P, u, b]\n```\nSplitting happens at UTF-16 code unit boundaries,\nand not at rune (Unicode code point) boundaries:\n```dart\n// String made up of two code units, but one rune.\nconst string = '\\u{1D11E}';\nfinal splitted = string.split('');\nprint(splitted); // ['\\ud834', '\\udd1e'] - 2 unpaired surrogate values\n```\nTo get a list of strings containing the individual runes of a string,\nyou should not use split.\nYou can instead get a string for each rune as follows:\n```dart\nconst string = '\\u{1F642}';\nfor (final rune in string.runes) {\nprint(String.fromCharCode(rune));\n}\n```"
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "List<String> split(Pattern pattern)"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`iterable.dart`/Iterable#map().",
      "documentation": [
        "The current elements of this iterable modified by [toElement].\nReturns a new lazy [Iterable] with elements that are created by\ncalling `toElement` on each element of this `Iterable` in\niteration order.\nThe returned iterable is lazy, so it won't iterate the elements of\nthis iterable until it is itself iterated, and then it will apply\n[toElement] to create one element at a time.\nThe converted elements are not cached.\nIterating multiple times over the returned [Iterable]\nwill invoke the supplied [toElement] function once per element\nfor on each iteration.\nMethods on the returned iterable are allowed to omit calling `toElement`\non any element where the result isn't needed.\nFor example, [elementAt] may call `toElement` only once.\nEquivalent to:\n```\nIterable<T> map<T>(T toElement(E e)) sync* {\nfor (var value in this) {\nyield toElement(value);\n}\n}\n```\nExample:\n```dart import:convert\nvar products = jsonDecode('''\n[\n{\"name\": \"Screwdriver\", \"price\": 42.00},\n{\"name\": \"Wingnut\", \"price\": 0.50}\n]\n''');\nvar values = products.map((product) => product['price'] as double);\nvar totalPrice = values.fold(0.0, (a, b) => a + b); // 42.5.\n```"
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "Iterable<T> map<T>(T Function(String) toElement)"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#toLowerCase().",
      "documentation": [
        "Converts all characters in this string to lower case.\nIf the string is already in all lower case, this method returns `this`.\n```dart\n'ALPHABET'.toLowerCase(); // 'alphabet'\n'abc'.toLowerCase(); // 'abc'\n```\nThis function uses the language independent Unicode mapping and thus only\nworks in some languages."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "String toLowerCase()"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`iterable.dart`/Iterable#join().",
      "documentation": [
        "Converts each element to a [String] and concatenates the strings.\nIterates through elements of this iterable,\nconverts each one to a [String] by calling [Object.toString],\nand then concatenates the strings, with the\n[separator] string interleaved between the elements.\nExample:\n```dart\nfinal planetsByMass = <double, String>{0.06: 'Mercury', 0.81: 'Venus',\n0.11: 'Mars'};\nfinal joinedNames = planetsByMass.values.join('-'); // Mercury-Venus-Mars\n```"
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "String join([String separator = \"\"])"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`int.dart`/int#",
      "documentation": [
        "An integer number.\nThe default implementation of `int` is 64-bit two's complement integers\nwith operations that wrap to that range on overflow.\n**Note:** When compiling to JavaScript, integers are restricted to values\nthat can be represented exactly by double-precision floating point values.\nThe available integer values include all integers between -2^53 and 2^53,\nand some integers with larger magnitude. That includes some integers larger\nthan 2^63.\nThe behavior of the operators and methods in the [int]\nclass therefore sometimes differs between the Dart VM and Dart code\ncompiled to JavaScript. For example, the bitwise operators truncate their\noperands to 32-bit integers when compiled to JavaScript.\nClasses cannot extend, implement, or mix in `int`.\n**See also:**\n* [num] the super class for [int].\n* [Numbers](https://dart.dev/guides/language/numbers) in\n[A tour of the Dart language](https://dart.dev/guides/language/language-tour)."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract final class int extends num"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#`<get>length`.",
      "documentation": [
        "The length of the string.\nReturns the number of UTF-16 code units in this string. The number\nof [runes] might be fewer if the string contains characters outside\nthe Basic Multilingual Plane (plane 0):\n```dart\n'Dart'.length;          // 4\n'Dart'.runes.length;    // 4\nvar clef = '\\u{1D11E}';\nclef.length;            // 2\nclef.runes.length;      // 1\n```"
      ],
      "kind": "Property",
      "signature_documentation": {
        "language": "Dart",
        "text": "int get length"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#replaceAll().",
      "documentation": [
        "Replaces all substrings that match [from] with [replace].\nCreates a new string in which the non-overlapping substrings matching\n[from] (the ones iterated by `from.allMatches(thisString)`) are replaced\nby the literal string [replace].\n```dart\n'resume'.replaceAll(RegExp(r'e'), '\u00e9'); // 'r\u00e9sum\u00e9'\n```\nNotice that the [replace] string is not interpreted. If the replacement\ndepends on the match (for example, on a [RegExp]'s capture groups), use\nthe [replaceAllMapped] method instead."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "String replaceAll(Pattern from, String replace)"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`date_time.dart`/DateTime#",
      "documentation": [
        "An instant in time, such as July 20, 1969, 8:18pm GMT.\nDateTimes can represent time values that are at a distance of at most\n100,000,000 days from epoch (1970-01-01 UTC): -271821-04-20 to 275760-09-13.\nCreate a `DateTime` object by using one of the constructors\nor by parsing a correctly formatted string,\nwhich complies with a subset of ISO 8601.\n**Note:** hours are specified between 0 and 23,\nas in a 24-hour clock.\nFor example:\n```dart\nfinal now = DateTime.now();\nfinal berlinWallFell = DateTime.utc(1989, 11, 9);\nfinal moonLanding = DateTime.parse('1969-07-20 20:18:04Z'); // 8:18pm\n```\nA `DateTime` object is anchored either in the UTC time zone\nor in the local time zone of the current computer\nwhen the object is created.\nOnce created, neither the value nor the time zone\nof a `DateTime` object may be changed.\nYou can use properties to get\nthe individual units of a `DateTime` object.\n```\nprint(berlinWallFell.year); // 1989\nprint(berlinWallFell.month); // 11\nprint(berlinWallFell.day); // 9\nprint(moonLanding.hour); // 20\nprint(moonLanding.minute); // 18\n```\nFor convenience and readability,\nthe `DateTime` class provides a constant for each `day` and `month`\nname - for example, [august] and [friday].\nYou can use these constants to improve code readability:\n```dart\nfinal berlinWallFell = DateTime.utc(1989, DateTime.november, 9);\nprint(DateTime.november); // 11\nassert(berlinWallFell.month == DateTime.november);\nassert(berlinWallFell.weekday == DateTime.thursday);\n```\n`Day` and `month` values begin at 1, and the week starts on `Monday`.\nThat is, the constants [january] and [monday] are both 1.\n## Working with UTC and local time\nA `DateTime` object is in the local time zone\nunless explicitly created in the UTC time zone.\nUse [isUtc] to determine whether a `DateTime` object is based in UTC.\n```dart\nfinal dDay = DateTime.utc(1944, 6, 6);\nprint(dDay.isUtc); // true\nfinal dDayLocal = DateTime(1944, 6, 6);\nprint(dDayLocal.isUtc); // false\n```\nUse the methods [toLocal] and [toUtc]\nto get the equivalent date/time value specified in the other time zone.\n```\nfinal localDay = dDay.toLocal(); // e.g. 1944-06-06 02:00:00.000\nprint(localDay.isUtc); // false\nfinal utcFromLocal = localDay.toUtc(); // 1944-06-06 00:00:00.000Z\nprint(utcFromLocal.isUtc); // true\n```\nUse [timeZoneName] to get an abbreviated name of the time zone\nfor the `DateTime` object.\n```\nprint(dDay.timeZoneName); // UTC\nprint(localDay.timeZoneName); // e.g. EET\n```\nTo find the difference\nbetween UTC and the time zone of a `DateTime` object\ncall [timeZoneOffset].\n```\nprint(dDay.timeZoneOffset); // 0:00:00.000000\nprint(localDay.timeZoneOffset); // e.g. 2:00:00.000000\n```\n## Comparing DateTime objects\nThe `DateTime` class contains methods for comparing `DateTime`s\nchronologically, such as [isAfter], [isBefore], and [isAtSameMomentAs].\n```\nprint(berlinWallFell.isAfter(moonLanding)); // true\nprint(berlinWallFell.isBefore(moonLanding)); // false\nprint(dDay.isAtSameMomentAs(localDay)); // true\n```\n## Using DateTime with Duration\nUse the [add] and [subtract] methods with a [Duration] object\nto create a `DateTime` object based on another.\nFor example, to find the point in time that is 36 hours after now,\nyou can write:\n```dart\nfinal now = DateTime.now();\nfinal later = now.add(const Duration(hours: 36));\n```\nTo find out how much time is between two `DateTime` objects use\n[difference], which returns a [Duration] object:\n```\nfinal difference = berlinWallFell.difference(moonLanding);\nprint(difference.inDays); // 7416\n```\nThe difference between two dates in different time zones\nis just the number of nanoseconds between the two points in time.\nIt doesn't take calendar days into account.\nThat means that the difference between two midnights in local time may be\nless than 24 hours times the number of days between them,\nif there is a daylight saving change in between.\nIf the difference above is calculated using Australian local time, the\ndifference is 7415 days and 23 hours, which is only 7415 whole days as\nreported by `inDays`.\n## Other resources\n* See [Duration] to represent a span of time.\n* See [Stopwatch] to measure timespans.\n* The `DateTime` class does not provide internationalization.\nTo internationalize your code, use\nthe [intl](https://pub.dev/packages/intl) package."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "class DateTime implements Comparable<DateTime>"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`map.dart`/Map#",
      "documentation": [
        "A collection of key/value pairs, from which you retrieve a value\nusing its associated key.\nThere is a finite number of keys in the map,\nand each key has exactly one value associated with it.\nMaps, and their keys and values, can be iterated.\nThe order of iteration is defined by the individual type of map.\nExamples:\n* The plain [HashMap] is unordered (no order is guaranteed),\n* the [LinkedHashMap] iterates in key insertion order,\n* and a sorted map like [SplayTreeMap] iterates the keys in sorted order.\nIt is generally not allowed to modify the map (add or remove keys) while\nan operation is being performed on the map, for example in functions called\nduring a [forEach] or [putIfAbsent] call.\nModifying the map while iterating the keys or values\nmay also break the iteration.\nIt is generally not allowed to modify the equality of keys (and thus not\ntheir hashcode) while they are in the map. Some specialized subtypes may be\nmore permissive, in which case they should document this behavior."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract interface class Map<K, V>"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`date_time.dart`/DateTime#parse().",
      "documentation": [
        "Constructs a new [DateTime] instance based on [formattedString].\nThrows a [FormatException] if the input string cannot be parsed.\nThe function parses a subset of ISO 8601,\nwhich includes the subset accepted by RFC 3339.\nThe accepted inputs are currently:\n* A date: A signed four-to-six digit year, two digit month and\ntwo digit day, optionally separated by `-` characters.\nExamples: \"19700101\", \"-0004-12-24\", \"81030-04-01\".\n* An optional time part, separated from the date by either `T` or a space.\nThe time part is a two digit hour,\nthen optionally a two digit minutes value,\nthen optionally a two digit seconds value, and\nthen optionally a '.' or ',' followed by at least a one digit\nsecond fraction.\nThe minutes and seconds may be separated from the previous parts by a\n':'.\nExamples: \"12\", \"12:30:24.124\", \"12:30:24,124\", \"123010.50\".\n* An optional time-zone offset part,\npossibly separated from the previous by a space.\nThe time zone is either 'z' or 'Z', or it is a signed two digit hour\npart and an optional two digit minute part. The sign must be either\n\"+\" or \"-\", and cannot be omitted.\nThe minutes may be separated from the hours by a ':'.\nExamples: \"Z\", \"-10\", \"+01:30\", \"+1130\".\nThis includes the output of both [toString] and [toIso8601String], which\nwill be parsed back into a `DateTime` object with the same time as the\noriginal.\nThe result is always in either local time or UTC.\nIf a time zone offset other than UTC is specified,\nthe time is converted to the equivalent UTC time.\nExamples of accepted strings:\n* `\"2012-02-27\"`\n* `\"2012-02-27 13:27:00\"`\n* `\"2012-02-27 13:27:00.123456789z\"`\n* `\"2012-02-27 13:27:00,123456789z\"`\n* `\"20120227 13:27:00\"`\n* `\"20120227T132700\"`\n* `\"20120227\"`\n* `\"+20120227\"`\n* `\"2012-02-27T14Z\"`\n* `\"2012-02-27T14+00:00\"`\n* `\"-123450101 00:00:00 Z\"`: in the year -12345.\n* `\"2002-02-27T14:00:00-0500\"`: Same as `\"2002-02-27T19:00:00Z\"`\nThis method accepts out-of-range component values and interprets\nthem as overflows into the next larger component.\nFor example, \"2020-01-42\" will be parsed as 2020-02-11, because\nthe last valid date in that month is 2020-01-31, so 42 days is\ninterpreted as 31 days of that month plus 11 days into the next month.\nTo detect and reject invalid component values, use\n[DateFormat.parseStrict](https://pub.dev/documentation/intl/latest/intl/DateFormat/parseStrict.html)\nfrom the [intl](https://pub.dev/packages/intl) package."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "DateTime parse(String formattedString)"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`date_time.dart`/DateTime#toIso8601String().",
      "documentation": [
        "Returns an ISO-8601 full-precision extended format representation.\nThe format is `yyyy-MM-ddTHH:mm:ss.mmmuuuZ` for UTC time, and\n`yyyy-MM-ddTHH:mm:ss.mmmuuu` (no trailing \"Z\") for local/non-UTC time,\nwhere:\n* `yyyy` is a, possibly negative, four digit representation of the year,\nif the year is in the range -9999 to 9999,\notherwise it is a signed six digit representation of the year.\n* `MM` is the month in the range 01 to 12,\n* `dd` is the day of the month in the range 01 to 31,\n* `HH` are hours in the range 00 to 23,\n* `mm` are minutes in the range 00 to 59,\n* `ss` are seconds in the range 00 to 59 (no leap seconds),\n* `mmm` are milliseconds in the range 000 to 999, and\n* `uuu` are microseconds in the range 001 to 999. If [microsecond] equals\n0, then this part is omitted.\nThe resulting string can be parsed back using [parse].\n```dart\nfinal moonLanding = DateTime.utc(1969, 7, 20, 20, 18, 04);\nfinal isoDate = moonLanding.toIso8601String();\nprint(isoDate); // 1969-07-20T20:18:04.000Z\n```"
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "String toIso8601String()"
      }
    },
    {
      "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/testWidgets().",
      "documentation": [
        "Runs the [callback] inside the Flutter test environment.\nUse this function for testing custom [StatelessWidget]s and\n[StatefulWidget]s.\nThe callback can be asynchronous (using `async`/`await` or\nusing explicit [Future]s).\nThe `timeout` argument specifies the backstop timeout implemented by the\n`test` package. If set, it should be relatively large (minutes). It defaults\nto ten minutes for tests run by `flutter test`, and is unlimited for tests\nrun by `flutter run`; specifically, it defaults to\n[TestWidgetsFlutterBinding.defaultTestTimeout].\nIf the `semanticsEnabled` parameter is set to `true`,\n[WidgetTester.ensureSemantics] will have been called before the tester is\npassed to the `callback`, and that handle will automatically be disposed\nafter the callback is finished. It defaults to true.\nThis function uses the [test] function in the test package to\nregister the given callback as a test. The callback, when run,\nwill be given a new instance of [WidgetTester]. The [find] object\nprovides convenient widget [Finder]s for use with the\n[WidgetTester].\nWhen the [variant] argument is set, [testWidgets] will run the test once for\neach value of the [TestVariant.values]. If [variant] is not set, the test\nwill be run once using the base test environment.\nIf the [tags] are passed, they declare user-defined tags that are implemented by\nthe `test` package.\nThe argument [experimentalLeakTesting] is experimental and is not recommended\nfor use outside of the Flutter framework.\nWhen [experimentalLeakTesting] is set, it is used to leak track objects created\nduring test execution.\nOtherwise [LeakTesting.settings] is used.\nAdjust [LeakTesting.settings] in `flutter_test_config.dart`\n(see https://flutter.dev/to/flutter-test-docs)\nfor the entire package or folder, or in the test's main for a test file\n(don't use [setUp] or [setUpAll]).\nTo turn off leak tracking just for one test, set [experimentalLeakTesting] to\n`LeakTrackingForTests.ignore()`.\n## Sample code\n```dart\ntestWidgets('MyWidget', (WidgetTester tester) async {\nawait tester.pumpWidget(const MyWidget());\nawait tester.tap(find.text('Save'));\nexpect(find.text('Success'), findsOneWidget);\n});\n```"
      ],
      "kind": "Function",
      "signature_documentation": {
        "language": "Dart",
        "text": "void testWidgets(\n  String description,\n  Future<void> Function(WidgetTester) callback, {\n  bool skip,\n  Timeout timeout,\n  bool semanticsEnabled = true,\n  TestVariant<Object> variant = const DefaultTestVariant(),\n  dynamic tags,\n  int retry,\n  LeakTesting experimentalLeakTesting,\n})"
      }
    },
    {
      "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/WidgetTester#",
      "documentation": [
        "Class that programmatically interacts with widgets and the test environment.\nTypically, a test uses [pumpWidget] to load a widget tree (in a manner very\nsimilar to how [runApp] works in a Flutter application). Then, methods such\nas [tap], [drag], [enterText], [fling], [longPress], etc, can be used to\ninteract with the application. The application runs in a [FakeAsync] zone,\nwhich allows time to be stepped forward deliberately; this is done using the\n[pump] method.\nThe [expect] function can then be used to examine the state of the\napplication, typically using [Finder]s such as those in the [find]\nnamespace, and [Matcher]s such as [findsOneWidget].\n```dart\ntestWidgets('MyWidget', (WidgetTester tester) async {\nawait tester.pumpWidget(const MyWidget());\nawait tester.tap(find.text('Save'));\nawait tester.pump(); // allow the application to handle\nawait tester.pump(const Duration(seconds: 1)); // skip past the animation\nexpect(find.text('Success'), findsOneWidget);\n});\n```\nFor convenience, instances of this class (such as the one provided by\n`testWidgets`) can be used as the `vsync` for `AnimationController` objects.\nWhen the binding is [LiveTestWidgetsFlutterBinding], events from\n[LiveTestWidgetsFlutterBinding.deviceEventDispatcher] will be handled in\n[dispatchEvent]. Thus, using `flutter run` to run a test lets one tap on\nthe screen to generate [Finder]s relevant to the test."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "class WidgetTester extends WidgetController implements HitTestDispatcher, TickerProvider"
      }
    },
    {
      "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/WidgetTester#pumpWidget().",
      "documentation": [
        "Renders the UI from the given [widget].\nCalls [runApp] with the given widget, then triggers a frame and flushes\nmicrotasks, by calling [pump] with the same `duration` (if any). The\nsupplied [EnginePhase] is the final phase reached during the pump pass; if\nnot supplied, the whole pass is executed.\nSubsequent calls to this is different from [pump] in that it forces a full\nrebuild of the tree, even if [widget] is the same as the previous call.\n[pump] will only rebuild the widgets that have changed.\nThis method should not be used as the first parameter to an [expect] or\n[expectLater] call to test that a widget throws an exception. Instead, use\n[TestWidgetsFlutterBinding.takeException].\n{@tool snippet}\n```dart\ntestWidgets('MyWidget asserts invalid bounds', (WidgetTester tester) async {\nawait tester.pumpWidget(const MyWidget());\nexpect(tester.takeException(), isAssertionError); // or isNull, as appropriate.\n});\n```\n{@end-tool}\nBy default, the provided `widget` is rendered into [WidgetTester.view],\nwhose properties tests can modify to simulate different scenarios (e.g.\nrunning on a large/small screen). Tests that want to control the\n[FlutterView] into which content is rendered can set `wrapWithView` to\nfalse and use [View] widgets in the provided `widget` tree to specify the\ndesired [FlutterView]s.\nSee also [LiveTestWidgetsFlutterBindingFramePolicy], which affects how\nthis method works when the test is run with `flutter run`."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "Future<void> pumpWidget(\n  Widget widget, {\n  Duration duration,\n  EnginePhase phase = EnginePhase.sendSemanticsUpdate,\n  bool wrapWithView = true,\n})"
      }
    },
    {
      "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/expect().",
      "documentation": [
        "Assert that `actual` matches `matcher`.\nSee [matcher_expect.expect] for details. This is a variant of that function\nthat additionally verifies that there are no asynchronous APIs\nthat have not yet resolved.\nSee also:\n* [expectLater] for use with asynchronous matchers."
      ],
      "kind": "Function",
      "signature_documentation": {
        "language": "Dart",
        "text": "void expect(\n  dynamic actual,\n  dynamic matcher, {\n  String reason,\n  dynamic skip,\n})"
      }
    },
    {
      "symbol": "scip-dart pub flutter_test . lib/src/`finders.dart`/find.",
      "documentation": [
        "Some frequently used [Finder]s and [SemanticsFinder]s."
      ],
      "kind": "Variable",
      "signature_documentation": {
        "language": "Dart",
        "text": "CommonFinders find"
      }
    },
    {
      "symbol": "scip-dart pub flutter_test . lib/src/`finders.dart`/CommonFinders#text().",
      "documentation": [
        "Finds [Text], [EditableText], and optionally [RichText] widgets\ncontaining string equal to the `text` argument.\nIf `findRichText` is false, all standalone [RichText] widgets are\nignored and `text` is matched with [Text.data] or [Text.textSpan].\nIf `findRichText` is true, [RichText] widgets (and therefore also\n[Text] and [Text.rich] widgets) are matched by comparing the\n[InlineSpan.toPlainText] with the given `text`.\nFor [EditableText] widgets, the `text` is always compared to the current\nvalue of the [EditableText.controller].\nIf the `skipOffstage` argument is true (the default), then this skips\nnodes that are [Offstage] or that are from inactive [Route]s.\n## Sample code\n```dart\nexpect(find.text('Back'), findsOneWidget);\n```\nThis will match [Text], [Text.rich], and [EditableText] widgets that\ncontain the \"Back\" string.\n```dart\nexpect(find.text('Close', findRichText: true), findsOneWidget);\n```\nThis will match [Text], [Text.rich], [EditableText], as well as standalone\n[RichText] widgets that contain the \"Close\" string."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "Finder text(\n  String text, {\n  bool findRichText = false,\n  bool skipOffstage = true,\n})"
      }
    },
    {
      "symbol": "scip-dart pub flutter_test . lib/src/`matchers.dart`/findsOneWidget.",
      "documentation": [
        "Asserts that the [Finder] locates at exactly one widget in the widget tree.\nThis is equivalent to the preferred [findsOne] method.\n## Sample code\n```dart\nexpect(find.text('Save'), findsOneWidget);\n```\nSee also:\n* [findsNothing], when you want the finder to not find anything.\n* [findsAny], when you want the finder to find one or more candidates.\n* [findsExactly], when you want the finder to find a specific number of candidates.\n* [findsAtLeast], when you want the finder to find at least a specific number of candidates."
      ],
      "kind": "Variable",
      "signature_documentation": {
        "language": "Dart",
        "text": "Matcher findsOneWidget"
      }
    },
    {
      "symbol": "scip-dart pub flutter_test . lib/src/`matchers.dart`/findsNothing.",
      "documentation": [
        "Asserts that the [FinderBase] matches nothing in the available candidates.\n## Sample code\n```dart\nexpect(find.text('Save'), findsNothing);\n```\nSee also:\n* [findsAny], when you want the finder to find one or more candidates.\n* [findsOne], when you want the finder to find exactly one candidate.\n* [findsExactly], when you want the finder to find a specific number of candidates.\n* [findsAtLeast], when you want the finder to find at least a specific number of candidates."
      ],
      "kind": "Variable",
      "signature_documentation": {
        "language": "Dart",
        "text": "Matcher findsNothing"
      }
    },
    {
      "symbol": "scip-dart pub flutter_test . lib/src/`controller.dart`/WidgetController#tap().",
      "documentation": [
        "Dispatch a pointer down / pointer up sequence at the center of\nthe given widget, assuming it is exposed.\n{@template flutter.flutter_test.WidgetController.tap.warnIfMissed}\nThe `warnIfMissed` argument, if true (the default), causes a warning to be\ndisplayed on the console if the specified [Finder] indicates a widget and\nlocation that, were a pointer event to be sent to that location, would not\nactually send any events to the widget (e.g. because the widget is\nobscured, or the location is off-screen, or the widget is transparent to\npointer events).\nSet the argument to false to silence that warning if you intend to not\nactually hit the specified element.\n{@endtemplate}\nFor example, a test that verifies that tapping a disabled button does not\ntrigger the button would set `warnIfMissed` to false, because the button\nwould ignore the tap."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "Future<void> tap(\n  FinderBase<Element> finder, {\n  int pointer,\n  int buttons = kPrimaryButton,\n  bool warnIfMissed = true,\n  PointerDeviceKind kind = PointerDeviceKind.touch,\n})"
      }
    },
    {
      "symbol": "scip-dart pub flutter_test . lib/src/`finders.dart`/CommonFinders#byIcon().",
      "documentation": [
        "Finds [Icon] widgets containing icon data equal to the `icon`\nargument.\n## Sample code\n```dart\nexpect(find.byIcon(Icons.inbox), findsOneWidget);\n```\nIf the `skipOffstage` argument is true (the default), then this skips\nnodes that are [Offstage] or that are from inactive [Route]s."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "Finder byIcon(IconData icon, {bool skipOffstage = true})"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`icons.dart`/Icons#",
      "documentation": [
        "Identifiers for the supported [Material Icons](https://material.io/resources/icons).\nUse with the [Icon] class to show specific icons. Icons are identified by\ntheir name as listed below, e.g. [Icons.airplanemode_on].\nSearch and find the perfect icon on the [Google Fonts](https://material.io/resources/icons) website.\nTo use this class, make sure you set `uses-material-design: true` in your\nproject's `pubspec.yaml` file in the `flutter` section. This ensures that\nthe Material Icons font is included in your application. This font is used to\ndisplay the icons. For example:\n```yaml\nname: my_awesome_application\nflutter:\nuses-material-design: true\n```\n{@tool snippet}\nThis example shows how to create a [Row] of [Icon]s in different colors and\nsizes. The first [Icon] uses a [Icon.semanticLabel] to announce in accessibility\nmodes like TalkBack and VoiceOver.\n![The following code snippet would generate a row of icons consisting of a pink heart, a green musical note, and a blue umbrella, each progressively bigger than the last.](https://flutter.github.io/assets-for-api-docs/assets/widgets/icon.png)\n```dart\nconst Row(\nmainAxisAlignment: MainAxisAlignment.spaceAround,\nchildren: <Widget>[\nIcon(\nIcons.favorite,\ncolor: Colors.pink,\nsize: 24.0,\nsemanticLabel: 'Text to announce in accessibility modes',\n),\nIcon(\nIcons.audiotrack,\ncolor: Colors.green,\nsize: 30.0,\n),\nIcon(\nIcons.beach_access,\ncolor: Colors.blue,\nsize: 36.0,\n),\n],\n)\n```\n{@end-tool}\nSee also:\n* [Icon]\n* [IconButton]\n* <https://material.io/resources/icons>\n* [AnimatedIcons], for the list of available animated Material Icons."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract final class Icons"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`icons.dart`/Icons#add.",
      "documentation": [
        "<i class=\"material-icons md-36\">add</i> &#x2014; material icon named \"add\"."
      ],
      "kind": "Field",
      "signature_documentation": {
        "language": "Dart",
        "text": "IconData add"
      }
    },
    {
      "symbol": "scip-dart pub flutter_test . lib/src/`widget_tester.dart`/WidgetTester#pump().",
      "documentation": [
        "Triggers a frame after `duration` amount of time.\nThis makes the framework act as if the application had janked (missed\nframes) for `duration` amount of time, and then received a \"Vsync\" signal\nto paint the application.\nFor a [FakeAsync] environment (typically in `flutter test`), this advances\ntime and timeout counting; for a live environment this delays `duration`\ntime.\nThis is a convenience function that just calls\n[TestWidgetsFlutterBinding.pump].\nSee also [LiveTestWidgetsFlutterBindingFramePolicy], which affects how\nthis method works when the test is run with `flutter run`."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "Future<void> pump([Duration duration, EnginePhase phase = EnginePhase.sendSemanticsUpdate])"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`list.dart`/List#",
      "documentation": [
        "An indexable collection of objects with a length.\nSubclasses of this class implement different kinds of lists.\nThe most common kinds of lists are:\n* **Fixed-length list**\nAn error occurs when attempting to use operations\nthat can change the length of the list.\n* **Growable list**\nFull implementation of the API defined in this class.\nThe default growable list, as created by `[]`, keeps\nan internal buffer, and grows that buffer when necessary. This guarantees\nthat a sequence of [add] operations will each execute in amortized constant\ntime. Setting the length directly may take time proportional to the new\nlength, and may change the internal capacity so that a following add\noperation will need to immediately increase the buffer capacity.\nOther list implementations may have different performance behavior.\nExample of fixed-length list:\n```dart\nfinal fixedLengthList = List<int>.filled(5, 0); // Creates fixed-length list.\nprint(fixedLengthList); // [0, 0, 0, 0, 0]\nfixedLengthList[0] = 87;\nfixedLengthList.setAll(1, [1, 2, 3]);\nprint(fixedLengthList); // [87, 1, 2, 3, 0]\n// Fixed length list length can't be changed or increased\nfixedLengthList.length = 0;  // Throws\nfixedLengthList.add(499);    // Throws\n```\nExample of growable list:\n```dart\nfinal growableList = <String>['A', 'B']; // Creates growable list.\n```\nTo add data to the growable list, use [operator[]=], [add] or [addAll].\n```\ngrowableList[0] = 'G';\nprint(growableList); // [G, B]\ngrowableList.add('X');\ngrowableList.addAll({'C', 'B'});\nprint(growableList); // [G, B, X, C, B]\n```\nTo check whether, and where, the element is in the list, use [indexOf] or\n[lastIndexOf].\n```\nfinal indexA = growableList.indexOf('A'); // -1 (not in the list)\nfinal firstIndexB = growableList.indexOf('B'); // 1\nfinal lastIndexB = growableList.lastIndexOf('B'); // 4\n```\nTo remove an element from the growable list, use [remove], [removeAt],\n[removeLast], [removeRange] or [removeWhere].\n```\ngrowableList.remove('C');\ngrowableList.removeLast();\nprint(growableList); // [G, B, X]\n```\nTo insert an element at position in the list, use [insert] or [insertAll].\n```\ngrowableList.insert(1, 'New');\nprint(growableList); // [G, New, B, X]\n```\nTo replace a range of elements in the list, use [fillRange], [replaceRange]\nor [setRange].\n```\ngrowableList.replaceRange(0, 2, ['AB', 'A']);\nprint(growableList); // [AB, A, B, X]\ngrowableList.fillRange(2, 4, 'F');\nprint(growableList); // [AB, A, F, F]\n```\nTo sort the elements of the list, use [sort].\n```\ngrowableList.sort((a, b) => a.compareTo(b));\nprint(growableList); // [A, AB, F, F]\n```\nTo shuffle the elements of this list randomly, use [shuffle].\n```\ngrowableList.shuffle();\nprint(growableList); // e.g. [AB, F, A, F]\n```\nTo find the first element satisfying some predicate, or give a default\nvalue if none do, use [firstWhere].\n```\nbool isVowel(String char) => char.length == 1 && \"AEIOU\".contains(char);\nfinal firstVowel = growableList.firstWhere(isVowel, orElse: () => ''); // ''\n```\nThere are similar [lastWhere] and [singleWhere] methods.\nA list is an [Iterable] and supports all its methods, including\n[where], [map], [whereType] and [toList].\nLists are [Iterable]. Iteration occurs over values in index order. Changing\nthe values does not affect iteration, but changing the valid\nindices&mdash;that is, changing the list's length&mdash;between iteration\nsteps causes a [ConcurrentModificationError]. This means that only growable\nlists can throw ConcurrentModificationError. If the length changes\ntemporarily and is restored before continuing the iteration, the iterator\nmight not detect it.\nIt is generally not allowed to modify the list's length (adding or removing\nelements) while an operation on the list is being performed,\nfor example during a call to [forEach] or [sort].\nChanging the list's length while it is being iterated, either by iterating it\ndirectly or through iterating an [Iterable] that is backed by the list, will\nbreak the iteration."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract interface class List<E> implements Iterable<E>, _ListIterable<E>"
      }
    },
    {
      "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`stream_controller.dart`/StreamController#",
      "documentation": [
        "A controller with the stream it controls.\nThis controller allows sending data, error and done events on\nits [stream].\nThis class can be used to create a simple stream that others\ncan listen on, and to push events to that stream.\nIt's possible to check whether the stream is paused or not, and whether\nit has subscribers or not, as well as getting a callback when either of\nthese change.\nExample:\n```dart\nfinal streamController = StreamController(\nonPause: () => print('Paused'),\nonResume: () => print('Resumed'),\nonCancel: () => print('Cancelled'),\nonListen: () => print('Listens'),\n);\nstreamController.stream.listen(\n(event) => print('Event: $event'),\nonDone: () => print('Done'),\nonError: (error) => print(error),\n);\n```\nTo check whether there is a subscriber on the stream, use [hasListener].\n```dart continued\nvar hasListener = streamController.hasListener; // true\n```\nTo send data events to the stream, use [add] or [addStream].\n```dart continued\nstreamController.add(999);\nfinal stream = Stream<int>.periodic(\nconst Duration(milliseconds: 200), (count) => count * count).take(4);\nawait streamController.addStream(stream);\n```\nTo send an error event to the stream, use [addError] or [addStream].\n```dart continued\nstreamController.addError(Exception('Issue 101'));\nawait streamController.addStream(Stream.error(Exception('Issue 404')));\n```\nTo check whether the stream is closed, use [isClosed].\n```dart continued\nvar isClosed = streamController.isClosed; // false\n```\nTo close the stream, use [close].\n```dart continued\nawait streamController.close();\nisClosed = streamController.isClosed; // true\n```"
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract interface class StreamController<T> implements StreamSink<T>"
      }
    },
    {
      "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`stream_controller.dart`/StreamController#broadcast().",
      "documentation": [
        "A controller where [stream] can be listened to more than once.\nThe [Stream] returned by [stream] is a broadcast stream.\nIt can be listened to more than once.\nA Stream should be inert until a subscriber starts listening on it (using\nthe [onListen] callback to start producing events). Streams should not\nleak resources (like websockets) when no user ever listens on the stream.\nBroadcast streams do not buffer events when there is no listener.\nThe controller distributes any events to all currently subscribed\nlisteners at the time when [add], [addError] or [close] is called.\nIt is not allowed to call `add`, `addError`, or `close` before a previous\ncall has returned. The controller does not have any internal queue of\nevents, and if there are no listeners at the time the event or error is\nadded, it will just be dropped.\nEach listener subscription is handled independently,\nand if one pauses, only the pausing listener is affected.\nA paused listener will buffer events internally until unpaused or canceled.\nIf [sync] is true, events may be fired directly by the stream's\nsubscriptions during an [add], [addError] or [close] call.\nThe returned stream controller is a [SynchronousStreamController],\nand must be used with the care and attention necessary to not break\nthe [Stream] contract.\nSee [Completer.sync] for some explanations on when a synchronous\ndispatching can be used.\nIf in doubt, keep the controller non-sync.\nIf [sync] is false, the event will always be fired at a later time,\nafter the code adding the event has completed.\nIn that case, no guarantees are given with regard to when\nmultiple listeners get the events, except that each listener will get\nall events in the correct order. Each subscription handles the events\nindividually.\nIf two events are sent on an async controller with two listeners,\none of the listeners may get both events\nbefore the other listener gets any.\nA listener must be subscribed both when the event is initiated\n(that is, when [add] is called)\nand when the event is later delivered,\nin order to receive the event.\nThe [onListen] callback is called when the first listener is subscribed,\nand the [onCancel] is called when there are no longer any active listeners.\nIf a listener is added again later, after the [onCancel] was called,\nthe [onListen] will be called again."
      ],
      "kind": "Constructor",
      "signature_documentation": {
        "language": "Dart",
        "text": "StreamController<List<User>> StreamController.broadcast({\n  void Function() onListen,\n  void Function() onCancel,\n  bool sync = false,\n})"
      }
    },
    {
      "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`stream.dart`/Stream#",
      "documentation": [
        "A source of asynchronous data events.\nA Stream provides a way to receive a sequence of events.\nEach event is either a data event, also called an *element* of the stream,\nor an error event, which is a notification that something has failed.\nWhen a stream has emitted all its events,\na single \"done\" event notifies the listener that the end has been reached.\nYou produce a stream by calling an `async*` function, which then returns\na stream. Consuming that stream will lead the function to emit events\nuntil it ends, and the stream closes.\nYou consume a stream either using an `await for` loop, which is available\ninside an `async` or `async*` function, or by forwarding its events directly\nusing `yield*` inside an `async*` function.\nExample:\n```dart\nStream<T> optionalMap<T>(\nStream<T> source , [T Function(T)? convert]) async* {\nif (convert == null) {\nyield* source;\n} else {\nawait for (var event in source) {\nyield convert(event);\n}\n}\n}\n```\nWhen this function is called, it immediately returns a `Stream<T>` object.\nThen nothing further happens until someone tries to consume that stream.\nAt that point, the body of the `async*` function starts running.\nIf the `convert` function was omitted, the `yield*` will listen to the\n`source` stream and forward all events, date and errors, to the returned\nstream. When the `source` stream closes, the `yield*` is done,\nand the `optionalMap` function body ends too. This closes the returned\nstream.\nIf a `convert` *is* supplied, the function instead listens on the source\nstream and enters an `await for` loop which\nrepeatedly waits for the next data event.\nOn a data event, it calls `convert` with the value and emits the result\non the returned stream.\nIf no error events are emitted by the `source` stream,\nthe loop ends when the `source` stream does,\nthen the `optionalMap` function body completes,\nwhich closes the returned stream.\nOn an error event from the `source` stream,\nthe `await for` re-throws that error, which breaks the loop.\nThe error then reaches the end of the `optionalMap` function body,\nsince it's not caught.\nThat makes the error be emitted on the returned stream, which then closes.\nThe `Stream` class also provides functionality which allows you to\nmanually listen for events from a stream, or to convert a stream\ninto another stream or into a future.\nThe [forEach] function corresponds to the `await for` loop,\njust as [Iterable.forEach] corresponds to a normal `for`/`in` loop.\nLike the loop, it will call a function for each data event and break on an\nerror.\nThe more low-level [listen] method is what every other method is based on.\nYou call `listen` on a stream to tell it that you want to receive\nevents, and to register the callbacks which will receive those events.\nWhen you call `listen`, you receive a [StreamSubscription] object\nwhich is the active object providing the events,\nand which can be used to stop listening again,\nor to temporarily pause events from the subscription.\nThere are two kinds of streams: \"Single-subscription\" streams and\n\"broadcast\" streams.\n*A single-subscription stream* allows only a single listener during the whole\nlifetime of the stream.\nIt doesn't start generating events until it has a listener,\nand it stops sending events when the listener is unsubscribed,\neven if the source of events could still provide more.\nThe stream created by an `async*` function is a single-subscription stream,\nbut each call to the function creates a new such stream.\nListening twice on a single-subscription stream is not allowed, even after\nthe first subscription has been canceled.\nSingle-subscription streams are generally used for streaming chunks of\nlarger contiguous data, like file I/O.\n*A broadcast stream* allows any number of listeners, and it fires\nits events when they are ready, whether there are listeners or not.\nBroadcast streams are used for independent events/observers.\nIf several listeners want to listen to a single-subscription stream,\nuse [asBroadcastStream] to create a broadcast stream on top of the\nnon-broadcast stream.\nOn either kind of stream, stream transformations, such as [where] and\n[skip], return the same type of stream as the one the method was called on,\nunless otherwise noted.\nWhen an event is fired, the listener(s) at that time will receive the event.\nIf a listener is added to a broadcast stream while an event is being fired,\nthat listener will not receive the event currently being fired.\nIf a listener is canceled, it immediately stops receiving events.\nListening on a broadcast stream can be treated as listening on a new stream\ncontaining only the events that have not yet been emitted when the [listen]\ncall occurs.\nFor example the [first] getter listens to the stream, then returns the first\nevent that listener receives.\nThis is not necessarily the first even emitted by the stream, but the first\nof the *remaining* events of the broadcast stream.\nWhen the \"done\" event is fired, subscribers are unsubscribed before\nreceiving the event. After the event has been sent, the stream has no\nsubscribers. Adding new subscribers to a broadcast stream after this point\nis allowed, but they will just receive a new \"done\" event as soon\nas possible.\nStream subscriptions always respect \"pause\" requests. If necessary they need\nto buffer their input, but often, and preferably they can simply request\ntheir input to pause too.\nThe default implementation of [isBroadcast] returns false.\nA broadcast stream inheriting from [Stream] must override [isBroadcast]\nto return `true` if it wants to signal that it behaves like a broadcast\nstream."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract mixin class Stream<T>"
      }
    },
    {
      "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`stream_controller.dart`/StreamController#`<get>stream`.",
      "documentation": [
        "The stream that this controller is controlling."
      ],
      "kind": "Property",
      "signature_documentation": {
        "language": "Dart",
        "text": "Stream<List<User>> get stream"
      }
    },
    {
      "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#",
      "documentation": [
        "The result of an asynchronous computation.\nAn _asynchronous computation_ cannot provide a result immediately\nwhen it is started, unlike a synchronous computation which does compute\na result immediately by either returning a value or by throwing.\nAn asynchronous computation may need to wait for something external\nto the program (reading a file, querying a database, fetching a web page)\nwhich takes time.\nInstead of blocking all computation until the result is available,\nthe asynchronous computation immediately returns a `Future`\nwhich will *eventually* \"complete\" with the result.\n### Asynchronous programming\nTo perform an asynchronous computation, you use an `async` function\nwhich always produces a future.\nInside such an asynchronous function, you can use the `await` operation\nto delay execution until another asynchronous computation has a result.\nWhile execution of the awaiting function is delayed,\nthe program is not blocked, and can continue doing other things.\nExample:\n```dart\nimport \"dart:io\";\nFuture<bool> fileContains(String path, String needle) async {\nvar haystack = await File(path).readAsString();\nreturn haystack.contains(needle);\n}\n```\nHere the `File.readAsString` method from `dart:io` is an asynchronous\nfunction returning a `Future<String>`.\nThe `fileContains` function is marked with `async` right before its body,\nwhich means that you can use `await` inside it,\nand that it must return a future.\nThe call to `File(path).readAsString()` initiates reading the file into\na string and produces a `Future<String>` which will eventually contain the\nresult.\nThe `await` then waits for that future to complete with a string\n(or an error, if reading the file fails).\nWhile waiting, the program can do other things.\nWhen the future completes with a string, the `fileContains` function\ncomputes a boolean and returns it, which then completes the original\nfuture that it returned when first called.\nIf a future completes with an *error*, awaiting that future will\n(re-)throw that error. In the example here, we can add error checking:\n```dart\nimport \"dart:io\";\nFuture<bool> fileContains(String path, String needle) async {\ntry {\nvar haystack = await File(path).readAsString();\nreturn haystack.contains(needle);\n} on FileSystemException catch (exception, stack) {\n_myLog.logError(exception, stack);\nreturn false;\n}\n}\n```\nYou use a normal `try`/`catch` to catch the failures of awaited\nasynchronous computations.\nIn general, when writing asynchronous code, you should always await a\nfuture when it is produced, and not wait until after another asynchronous\ndelay. That ensures that you are ready to receive any error that the\nfuture might produce, which is important because an asynchronous error\nthat no-one is awaiting is an *uncaught* error and may terminate\nthe running program.\n### Programming with the `Future` API.\nThe `Future` class also provides a more direct, low-level functionality\nfor accessing the result that it completes with.\nThe `async` and `await` language features are built on top of this\nfunctionality, and it sometimes makes sense to use it directly.\nThere are things that you cannot do by just `await`ing one future at\na time.\nWith a [Future], you can manually register callbacks\nthat handle the value, or error, once it is available.\nFor example:\n```dart\nFuture<int> future = getFuture();\nfuture.then((value) => handleValue(value))\n.catchError((error) => handleError(error));\n```\nSince a [Future] can be completed in two ways,\neither with a value (if the asynchronous computation succeeded)\nor with an error (if the computation failed),\nyou can install callbacks for either or both cases.\nIn some cases we say that a future is completed *with another future*.\nThis is a short way of stating that the future is completed in the same way,\nwith the same value or error,\nas the other future once that other future itself completes.\nMost functions in the platform libraries that complete a future\n(for example [Completer.complete] or [Future.value]),\nalso accepts another future, and automatically handles forwarding\nthe result to the future being completed.\nThe result of registering callbacks is itself a `Future`,\nwhich in turn is completed with the result of invoking the\ncorresponding callback with the original future's result.\nThe new future is completed with an error if the invoked callback throws.\nFor example:\n```dart\nFuture<int> successor = future.then((int value) {\n// Invoked when the future is completed with a value.\nreturn 42;  // The successor is completed with the value 42.\n},\nonError: (e) {\n// Invoked when the future is completed with an error.\nif (canHandle(e)) {\nreturn 499;  // The successor is completed with the value 499.\n} else {\nthrow e;  // The successor is completed with the error e.\n}\n});\n```\nIf a future does not have any registered handler when it completes\nwith an error, it forwards the error to an \"uncaught-error handler\".\nThis behavior ensures that no error is silently dropped.\nHowever, it also means that error handlers should be installed early,\nso that they are present as soon as a future is completed with an error.\nThe following example demonstrates this potential bug:\n```dart\nvar future = getFuture();\nTimer(const Duration(milliseconds: 5), () {\n// The error-handler is not attached until 5 ms after the future has\n// been received. If the future fails before that, the error is\n// forwarded to the global error-handler, even though there is code\n// (just below) to eventually handle the error.\nfuture.then((value) { useValue(value); },\nonError: (e) { handleError(e); });\n});\n```\nWhen registering callbacks, it's often more readable to register the two\ncallbacks separately, by first using [then] with one argument\n(the value handler) and using a second [catchError] for handling errors.\nEach of these will forward the result that they don't handle\nto their successors, and together they handle both value and error result.\nIt has the additional benefit of the [catchError] handling errors in the\n[then] value callback too.\nUsing sequential handlers instead of parallel ones often leads to code that\nis easier to reason about.\nIt also makes asynchronous code very similar to synchronous code:\n```dart\n// Synchronous code.\ntry {\nint value = foo();\nreturn bar(value);\n} catch (e) {\nreturn 499;\n}\n```\nEquivalent asynchronous code, based on futures:\n```dart\nFuture<int> asyncValue = Future(foo);  // Result of foo() as a future.\nasyncValue.then((int value) {\nreturn bar(value);\n}).catchError((e) {\nreturn 499;\n});\n```\nSimilar to the synchronous code, the error handler (registered with\n[catchError]) is handling any errors thrown by either `foo` or `bar`.\nIf the error-handler had been registered as the `onError` parameter of\nthe `then` call, it would not catch errors from the `bar` call.\nFutures can have more than one callback-pair registered. Each successor is\ntreated independently and is handled as if it was the only successor.\nThe order in which the individual successors are completed is undefined.\nA future may also fail to ever complete. In that case, no callbacks are\ncalled. That situation should generally be avoided if possible, unless\nit's very clearly documented."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract interface class Future<T>"
      }
    },
    {
      "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`future.dart`/Future#delayed().",
      "documentation": [
        "Creates a future that runs its computation after a delay.\nThe [computation] will be executed after the given [duration] has passed,\nand the future is completed with the result of the computation.\nIf [computation] returns a future,\nthe future returned by this constructor will complete with the value or\nerror of that future.\nIf the duration is 0 or less,\nit completes no sooner than in the next event-loop iteration,\nafter all microtasks have run.\nIf [computation] is omitted,\nit will be treated as if [computation] was `() => null`,\nand the future will eventually complete with the `null` value.\nIn that case, [T] must be nullable.\nIf calling [computation] throws, the created future will complete with the\nerror.\nSee also [Completer] for a way to create and complete a future at a\nlater time that isn't necessarily after a known fixed duration.\nExample:\n```dart\nFuture.delayed(const Duration(seconds: 1), () {\nprint('One second has passed.'); // Prints after 1 second.\n});\n```"
      ],
      "kind": "Constructor",
      "signature_documentation": {
        "language": "Dart",
        "text": "Future<dynamic> Future.delayed(Duration duration, [FutureOr<dynamic> Function() computation])"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`duration.dart`/Duration#",
      "documentation": [
        "A span of time, such as 27 days, 4 hours, 12 minutes, and 3 seconds.\nA `Duration` represents a difference from one point in time to another. The\nduration may be \"negative\" if the difference is from a later time to an\nearlier.\nDurations are context independent. For example, a duration of 2 days is\nalways 48 hours, even when it is added to a `DateTime` just when the\ntime zone is about to make a daylight-savings switch. (See [DateTime.add]).\nDespite the same name, a `Duration` object does not implement \"Durations\"\nas specified by ISO 8601. In particular, a duration object does not keep\ntrack of the individually provided members (such as \"days\" or \"hours\"), but\nonly uses these arguments to compute the length of the corresponding time\ninterval.\nTo create a new `Duration` object, use this class's single constructor\ngiving the appropriate arguments:\n```dart\nconst fastestMarathon = Duration(hours: 2, minutes: 3, seconds: 2);\n```\nThe [Duration] represents a single number of microseconds,\nwhich is the sum of all the individual arguments to the constructor.\nProperties can access that single number in different ways.\nFor example the [inMinutes] gives the number of whole minutes\nin the total duration, which includes the minutes that were provided\nas \"hours\" to the constructor, and can be larger than 59.\n```dart\nconst fastestMarathon = Duration(hours: 2, minutes: 3, seconds: 2);\nprint(fastestMarathon.inDays); // 0\nprint(fastestMarathon.inHours); // 2\nprint(fastestMarathon.inMinutes); // 123\nprint(fastestMarathon.inSeconds); // 7382\nprint(fastestMarathon.inMilliseconds); // 7382000\n```\nThe duration can be negative, in which case\nall the properties derived from the duration are also non-positive.\n```dart\nconst overDayAgo = Duration(days: -1, hours: -10);\nprint(overDayAgo.inDays); // -1\nprint(overDayAgo.inHours); // -34\nprint(overDayAgo.inMinutes); // -2040\n```\nUse one of the properties, such as [inDays],\nto retrieve the integer value of the `Duration` in the specified time unit.\nNote that the returned value is rounded down.\nFor example,\n```dart\nconst aLongWeekend = Duration(hours: 88);\nprint(aLongWeekend.inDays); // 3\n```\nThis class provides a collection of arithmetic\nand comparison operators,\nplus a set of constants useful for converting time units.\n```dart\nconst firstHalf = Duration(minutes: 45); // 00:45:00.000000\nconst secondHalf = Duration(minutes: 45); // 00:45:00.000000\nconst overTime = Duration(minutes: 30); // 00:30:00.000000\nfinal maxGameTime = firstHalf + secondHalf + overTime;\nprint(maxGameTime.inMinutes); // 120\n// The duration of the firstHalf and secondHalf is the same, returns 0.\nvar result = firstHalf.compareTo(secondHalf);\nprint(result); // 0\n// Duration of overTime is shorter than firstHalf, returns < 0.\nresult = overTime.compareTo(firstHalf);\nprint(result); // < 0\n// Duration of secondHalf is longer than overTime, returns > 0.\nresult = secondHalf.compareTo(overTime);\nprint(result); // > 0\n```\n**See also:**\n* [DateTime] to represent a point in time.\n* [Stopwatch] to measure time-spans."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "class Duration implements Comparable<Duration>"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`duration.dart`/Duration#`<constructor>`().(milliseconds)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{int milliseconds = 0}"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`errors.dart`/ArgumentError#",
      "documentation": [
        "Error thrown when a function is passed an unacceptable argument.\nThe method should document restrictions on the arguments it accepts,\nfor example if an integer argument must be non-nullable,\na string argument must be non-empty,\nor a `dynamic`-typed argument must actually have one of a few accepted\ntypes.\nThe user should be able to predict which arguments will cause an\nerror to be throw, and avoid calling with those.\nIt's almost always a good idea to provide the unacceptable value\nas part of the error, to help the user figure out what vent wrong,\nso the [ArgumentError.value] constructor is the preferred constructor.\nUse [ArgumentError.new] only when the value cannot be provided for some\nreason."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "class ArgumentError extends Error"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`date_time.dart`/DateTime#now().",
      "documentation": [
        "Constructs a [DateTime] instance with current date and time in the\nlocal time zone.\n```dart\nfinal now = DateTime.now();\n```"
      ],
      "kind": "Constructor",
      "signature_documentation": {
        "language": "Dart",
        "text": "DateTime DateTime.now()"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`date_time.dart`/DateTime#`<get>millisecondsSinceEpoch`.",
      "documentation": [
        "The number of milliseconds since\nthe \"Unix epoch\" 1970-01-01T00:00:00Z (UTC).\nThis value is independent of the time zone.\nThis value is at most\n8,640,000,000,000,000ms (100,000,000 days) from the Unix epoch.\nIn other words: `millisecondsSinceEpoch.abs() <= 8640000000000000`."
      ],
      "kind": "Property",
      "signature_documentation": {
        "language": "Dart",
        "text": "int get millisecondsSinceEpoch"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`int.dart`/int#toString().",
      "documentation": [
        "Returns a string representation of this integer.\nThe returned string is parsable by [parse].\nFor any `int` `i`, it is guaranteed that\n`i == int.parse(i.toString())`."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "String toString()"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`list.dart`/List#add().",
      "documentation": [
        "Adds [value] to the end of this list,\nextending the length by one.\nThe list must be growable.\n```dart\nfinal numbers = <int>[1, 2, 3];\nnumbers.add(4);\nprint(numbers); // [1, 2, 3, 4]\n```"
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "void add(User value)"
      }
    },
    {
      "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`stream_controller.dart`/StreamController#add().",
      "documentation": [
        "Sends a data [event].\nListeners receive this event in a later microtask.\nNote that a synchronous controller (created by passing true to the `sync`\nparameter of the `StreamController` constructor) delivers events\nimmediately. Since this behavior violates the contract mentioned here,\nsynchronous controllers should only be used as described in the\ndocumentation to ensure that the delivered events always *appear* as if\nthey were delivered in a separate microtask."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "void add(List<User> event)"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`iterable.dart`/Iterable#firstWhere().",
      "documentation": [
        "The first element that satisfies the given predicate [test].\nIterates through elements and returns the first to satisfy [test].\nExample:\n```dart\nfinal numbers = <int>[1, 2, 3, 5, 6, 7];\nvar result = numbers.firstWhere((element) => element < 5); // 1\nresult = numbers.firstWhere((element) => element > 5); // 6\nresult =\nnumbers.firstWhere((element) => element > 10, orElse: () => -1); // -1\n```\nIf no element satisfies [test], the result of invoking the [orElse]\nfunction is returned.\nIf [orElse] is omitted, it defaults to throwing a [StateError].\nStops iterating on the first matching element."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "User firstWhere(bool Function(User) test, {User Function() orElse})"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`iterable.dart`/Iterable#where().",
      "documentation": [
        "Creates a new lazy [Iterable] with all elements that satisfy the\npredicate [test].\nThe matching elements have the same order in the returned iterable\nas they have in [iterator].\nThis method returns a view of the mapped elements.\nAs long as the returned [Iterable] is not iterated over,\nthe supplied function [test] will not be invoked.\nIterating will not cache results, and thus iterating multiple times over\nthe returned [Iterable] may invoke the supplied\nfunction [test] multiple times on the same element.\nExample:\n```dart\nfinal numbers = <int>[1, 2, 3, 5, 6, 7];\nvar result = numbers.where((x) => x < 5); // (1, 2, 3)\nresult = numbers.where((x) => x > 5); // (6, 7)\nresult = numbers.where((x) => x.isEven); // (2, 6)\n```"
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "Iterable<User> where(bool Function(User) test)"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`string.dart`/String#contains().",
      "documentation": [
        "Whether this string contains a match of [other].\nExample:\n```dart\nconst string = 'Dart strings';\nfinal containsD = string.contains('D'); // true\nfinal containsUpperCase = string.contains(RegExp(r'[A-Z]')); // true\n```\nIf [startIndex] is provided, this method matches only at or after that\nindex:\n```dart\nconst string = 'Dart strings';\nfinal containsD = string.contains(RegExp('D'), 0); // true\nfinal caseSensitive = string.contains(RegExp(r'[A-Z]'), 1); // false\n```\nThe [startIndex] must not be negative or greater than [length]."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "bool contains(Pattern other, [int startIndex = 0])"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`iterable.dart`/Iterable#toList().",
      "documentation": [
        "Creates a [List] containing the elements of this [Iterable].\nThe elements are in iteration order.\nThe list is fixed-length if [growable] is false.\nExample:\n```dart\nfinal planets = <int, String>{1: 'Mercury', 2: 'Venus', 3: 'Mars'};\nfinal keysList = planets.keys.toList(growable: false); // [1, 2, 3]\nfinal valuesList =\nplanets.values.toList(growable: false); // [Mercury, Venus, Mars]\n```"
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "List<User> toList({bool growable = true})"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`list.dart`/List#indexWhere().",
      "documentation": [
        "The first index in the list that satisfies the provided [test].\nSearches the list from index [start] to the end of the list.\nThe first time an object `o` is encountered so that `test(o)` is true,\nthe index of `o` is returned.\n```dart\nfinal notes = <String>['do', 're', 'mi', 're'];\nfinal first = notes.indexWhere((note) => note.startsWith('r')); // 1\nfinal second = notes.indexWhere((note) => note.startsWith('r'), 2); // 3\n```\nReturns -1 if [element] is not found.\n```dart\nfinal notes = <String>['do', 're', 'mi', 're'];\nfinal index = notes.indexWhere((note) => note.startsWith('k')); // -1\n```"
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "int indexWhere(bool Function(User) test, [int start = 0])"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`exceptions.dart`/Exception#",
      "documentation": [
        "A marker interface implemented by all core library exceptions.\nAn [Exception] is intended to convey information to the user about a failure,\nso that the error can be addressed programmatically. It is intended to be\ncaught, and it should contain useful data fields.\nCreating instances of [Exception] directly with `Exception(\"message\")`\nis discouraged in library code since it doesn't give users a precise\ntype they can catch. It may be reasonable to use instances of this\nclass in tests or during development.\nFor failures that are not intended to be caught, use [Error]\nand its subclasses."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract interface class Exception"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`list.dart`/List#removeWhere().",
      "documentation": [
        "Removes all objects from this list that satisfy [test].\nAn object `o` satisfies [test] if `test(o)` is true.\n```dart\nfinal numbers = <String>['one', 'two', 'three', 'four'];\nnumbers.removeWhere((item) => item.length == 3);\nprint(numbers); // [three, four]\n```\nThe list must be growable."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "void removeWhere(bool Function(User) test)"
      }
    },
    {
      "symbol": "scip-dart pub dart:async 3.5.0 dart:async/`stream_controller.dart`/StreamController#close().",
      "documentation": [
        "Closes the stream.\nNo further events can be added to a closed stream.\nThe returned future is the same future provided by [done].\nIt is completed when the stream listeners is done sending events,\nThis happens either when the done event has been sent,\nor when the subscriber on a single-subscription stream is canceled.\nA stream controller will not complete the returned future until all\nlisteners present when the done event is sent have stopped listening.\nA listener will stop listening if it is cancelled, or if it has handled\nthe done event.\nA paused listener will not process the done even until it is resumed, so\ncompletion of the returned Future will be delayed until all paused\nlisteners have been resumed or cancelled.\nIf no one listens to a non-broadcast stream,\nor the listener pauses and never resumes,\nthe done event will not be sent and this future will never complete."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "Future<dynamic> close()"
      }
    },
    {
      "symbol": "scip-dart pub flutter_test . lib/src/`test_compat.dart`/group().",
      "documentation": [
        "Creates a group of tests.\nA group's description (converted to a string) is included in the descriptions\nof any tests or sub-groups it contains. [setUp] and [tearDown] are also scoped\nto the containing group.\nIf `skip` is a String or `true`, the group is skipped. If it's a String, it\nshould explain why the group is skipped; this reason will be printed instead\nof running the group's tests."
      ],
      "kind": "Function",
      "signature_documentation": {
        "language": "Dart",
        "text": "void group(\n  Object description,\n  void Function() body, {\n  dynamic skip,\n  int retry,\n})"
      }
    },
    {
      "symbol": "scip-dart pub flutter_test . lib/src/`test_compat.dart`/test().",
      "documentation": [
        "Creates a new test case with the given description (converted to a string)\nand body.\nThe description will be added to the descriptions of any surrounding\n[group]s. If [testOn] is passed, it's parsed as a [platform selector][]; the\ntest will only be run on matching platforms.\n[platform selector]: https://github.com/dart-lang/test/tree/master/pkgs/test#platform-selectors\nIf [timeout] is passed, it's used to modify or replace the default timeout\nof 30 seconds. Timeout modifications take precedence in suite-group-test\norder, so [timeout] will also modify any timeouts set on the group or suite.\nIf [skip] is a String or `true`, the test is skipped. If it's a String, it\nshould explain why the test is skipped; this reason will be printed instead\nof running the test.\nIf [tags] is passed, it declares user-defined tags that are applied to the\ntest. These tags can be used to select or skip the test on the command line,\nor to do bulk test configuration. All tags should be declared in the\n[package configuration file][configuring tags]. The parameter can be an\n[Iterable] of tag names, or a [String] representing a single tag.\nIf [retry] is passed, the test will be retried the provided number of times\nbefore being marked as a failure.\n[configuring tags]: https://github.com/dart-lang/test/blob/44d6cb196f34a93a975ed5f3cb76afcc3a7b39b0/doc/package_config.md#configuring-tags\n[onPlatform] allows tests to be configured on a platform-by-platform\nbasis. It's a map from strings that are parsed as [PlatformSelector]s to\nannotation classes: [Timeout], [Skip], or lists of those. These\nannotations apply only on the given platforms. For example:\ntest('potentially slow test', () {\n// ...\n}, onPlatform: {\n// This test is especially slow on Windows.\n'windows': Timeout.factor(2),\n'browser': [\nSkip('add browser support'),\n// This will be slow on browsers once it works on them.\nTimeout.factor(2)\n]\n});\nIf multiple platforms match, the annotations apply in order as through\nthey were in nested groups."
      ],
      "kind": "Function",
      "signature_documentation": {
        "language": "Dart",
        "text": "void test(\n  Object description,\n  dynamic Function() body, {\n  String testOn,\n  Timeout timeout,\n  dynamic skip,\n  dynamic tags,\n  Map<String, dynamic> onPlatform,\n  int retry,\n})"
      }
    },
    {
      "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`equals_matcher.dart`/equals().",
      "documentation": [
        "Returns a matcher that matches if the value is structurally equal to\n[expected].\nIf [expected] is a [Matcher], then it matches using that. Otherwise it tests\nfor equality using `==` on the expected value.\nFor [Iterable]s and [Map]s, this will recursively match the elements. To\nhandle cyclic structures a recursion depth [limit] can be provided. The\ndefault limit is 100. [Set]s will be compared order-independently."
      ],
      "kind": "Function",
      "signature_documentation": {
        "language": "Dart",
        "text": "Matcher equals(Object expected, [int limit = 100])"
      }
    },
    {
      "symbol": "scip-dart pub flutter_test . lib/src/`test_compat.dart`/setUp().",
      "documentation": [
        "Registers a function to be run before tests.\nThis function will be called before each test is run. The `body` may be\nasynchronous; if so, it must return a [Future].\nIf this is called within a test group, it applies only to tests in that\ngroup. The `body` will be run after any set-up callbacks in parent groups or\nat the top level.\nEach callback at the top level or in a given group will be run in the order\nthey were declared."
      ],
      "kind": "Function",
      "signature_documentation": {
        "language": "Dart",
        "text": "void setUp(dynamic Function() body)"
      }
    },
    {
      "symbol": "scip-dart pub flutter_test . lib/src/`test_compat.dart`/tearDown().",
      "documentation": [
        "Registers a function to be run after tests.\nThis function will be called after each test is run. The `body` may be\nasynchronous; if so, it must return a [Future].\nIf this is called within a test group, it applies only to tests in that\ngroup. The `body` will be run before any tear-down callbacks in parent\ngroups or at the top level.\nEach callback at the top level or in a given group will be run in the\nreverse of the order they were declared.\nSee also [addTearDown], which adds tear-downs to a running test."
      ],
      "kind": "Function",
      "signature_documentation": {
        "language": "Dart",
        "text": "void tearDown(dynamic Function() body)"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`list.dart`/List#`<get>length`.",
      "documentation": [
        "The number of objects in this list.\nThe valid indices for a list are `0` through `length - 1`.\n```dart\nfinal numbers = <int>[1, 2, 3];\nprint(numbers.length); // 3\n```"
      ],
      "kind": "Property",
      "signature_documentation": {
        "language": "Dart",
        "text": "int get length"
      }
    },
    {
      "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`core_matchers.dart`/isTrue.",
      "documentation": [
        "A matcher that matches the Boolean value true."
      ],
      "kind": "Variable",
      "signature_documentation": {
        "language": "Dart",
        "text": "Matcher isTrue"
      }
    },
    {
      "symbol": "scip-dart pub matcher 0.12.16+1 lib/src/`core_matchers.dart`/isFalse.",
      "documentation": [
        "A matcher that matches anything except the Boolean value true."
      ],
      "kind": "Variable",
      "signature_documentation": {
        "language": "Dart",
        "text": "Matcher isFalse"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`binding.dart`/runApp().",
      "documentation": [
        "Inflate the given widget and attach it to the view.\nThe [runApp] method renders the provided `app` widget into the\n[PlatformDispatcher.implicitView] by wrapping it in a [View] widget, which\nwill bootstrap the render tree for the app. Apps that want to control which\n[FlutterView] they render into can use [runWidget] instead.\nThe widget is given constraints during layout that force it to fill the\nentire view. If you wish to align your widget to one side of the view\n(e.g., the top), consider using the [Align] widget. If you wish to center\nyour widget, you can also use the [Center] widget.\nCalling [runApp] again will detach the previous root widget from the view\nand attach the given widget in its place. The new widget tree is compared\nagainst the previous widget tree and any differences are applied to the\nunderlying render tree, similar to what happens when a [StatefulWidget]\nrebuilds after calling [State.setState].\nInitializes the binding using [WidgetsFlutterBinding] if necessary.\n{@template flutter.widgets.runApp.shutdown}\n## Application shutdown\nThis widget tree is not torn down when the application shuts down, because\nthere is no way to predict when that will happen. For example, a user could\nphysically remove power from their device, or the application could crash\nunexpectedly, or the malware on the device could forcibly terminate the\nprocess.\nApplications are responsible for ensuring that they are well-behaved\neven in the face of a rapid unscheduled termination.\nTo listen for platform shutdown messages (and other lifecycle changes),\nconsider the [AppLifecycleListener] API.\n{@endtemplate}\nTo artificially cause the entire widget tree to be disposed, consider\ncalling [runApp] with a widget such as [SizedBox.shrink].\n{@template flutter.widgets.runApp.dismissal}\n## Dismissing Flutter UI via platform native methods\nAn application may have both Flutter and non-Flutter UI in it. If the\napplication calls non-Flutter methods to remove Flutter based UI such as\nplatform native API to manipulate the platform native navigation stack,\nthe framework does not know if the developer intends to eagerly free\nresources or not. The widget tree remains mounted and ready to render\nas soon as it is displayed again.\n{@endtemplate}\nTo release resources more eagerly, establish a [platform channel](https://flutter.dev/to/platform-channels)\nand use it to call [runApp] with a widget such as [SizedBox.shrink] when\nthe framework should dispose of the active widget tree.\nSee also:\n* [runWidget], which bootstraps a widget tree without assuming the\n[FlutterView] into which it will be rendered.\n* [WidgetsBinding.attachRootWidget], which creates the root widget for the\nwidget hierarchy.\n* [RenderObjectToWidgetAdapter.attachToRenderTree], which creates the root\nelement for the element hierarchy.\n* [WidgetsBinding.handleBeginFrame], which pumps the widget pipeline to\nensure the widget, element, and render trees are all built."
      ],
      "kind": "Function",
      "signature_documentation": {
        "language": "Dart",
        "text": "void runApp(Widget app)"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/StatelessWidget#",
      "documentation": [
        "A widget that does not require mutable state.\nA stateless widget is a widget that describes part of the user interface by\nbuilding a constellation of other widgets that describe the user interface\nmore concretely. The building process continues recursively until the\ndescription of the user interface is fully concrete (e.g., consists\nentirely of [RenderObjectWidget]s, which describe concrete [RenderObject]s).\n{@youtube 560 315 https://www.youtube.com/watch?v=wE7khGHVkYY}\nStateless widget are useful when the part of the user interface you are\ndescribing does not depend on anything other than the configuration\ninformation in the object itself and the [BuildContext] in which the widget\nis inflated. For compositions that can change dynamically, e.g. due to\nhaving an internal clock-driven state, or depending on some system state,\nconsider using [StatefulWidget].\n## Performance considerations\nThe [build] method of a stateless widget is typically only called in three\nsituations: the first time the widget is inserted in the tree, when the\nwidget's parent changes its configuration (see [Element.rebuild]), and when\nan [InheritedWidget] it depends on changes.\nIf a widget's parent will regularly change the widget's configuration, or if\nit depends on inherited widgets that frequently change, then it is important\nto optimize the performance of the [build] method to maintain a fluid\nrendering performance.\nThere are several techniques one can use to minimize the impact of\nrebuilding a stateless widget:\n* Minimize the number of nodes transitively created by the build method and\nany widgets it creates. For example, instead of an elaborate arrangement\nof [Row]s, [Column]s, [Padding]s, and [SizedBox]es to position a single\nchild in a particularly fancy manner, consider using just an [Align] or a\n[CustomSingleChildLayout]. Instead of an intricate layering of multiple\n[Container]s and with [Decoration]s to draw just the right graphical\neffect, consider a single [CustomPaint] widget.\n* Use `const` widgets where possible, and provide a `const` constructor for\nthe widget so that users of the widget can also do so.\n* Consider refactoring the stateless widget into a stateful widget so that\nit can use some of the techniques described at [StatefulWidget], such as\ncaching common parts of subtrees and using [GlobalKey]s when changing the\ntree structure.\n* If the widget is likely to get rebuilt frequently due to the use of\n[InheritedWidget]s, consider refactoring the stateless widget into\nmultiple widgets, with the parts of the tree that change being pushed to\nthe leaves. For example instead of building a tree with four widgets, the\ninner-most widget depending on the [Theme], consider factoring out the\npart of the build function that builds the inner-most widget into its own\nwidget, so that only the inner-most widget needs to be rebuilt when the\ntheme changes.\n{@template flutter.flutter.widgets.framework.prefer_const_over_helper}\n* When trying to create a reusable piece of UI, prefer using a widget\nrather than a helper method. For example, if there was a function used to\nbuild a widget, a [State.setState] call would require Flutter to entirely\nrebuild the returned wrapping widget. If a [Widget] was used instead,\nFlutter would be able to efficiently re-render only those parts that\nreally need to be updated. Even better, if the created widget is `const`,\nFlutter would short-circuit most of the rebuild work.\n{@endtemplate}\nThis video gives more explanations on why `const` constructors are important\nand why a [Widget] is better than a helper method.\n{@youtube 560 315 https://www.youtube.com/watch?v=IOyq-eTRhvo}\n{@tool snippet}\nThe following is a skeleton of a stateless widget subclass called `GreenFrog`.\nNormally, widgets have more constructor arguments, each of which corresponds\nto a `final` property.\n```dart\nclass GreenFrog extends StatelessWidget {\nconst GreenFrog({ super.key });\n@override\nWidget build(BuildContext context) {\nreturn Container(color: const Color(0xFF2DBD3A));\n}\n}\n```\n{@end-tool}\n{@tool snippet}\nThis next example shows the more generic widget `Frog` which can be given\na color and a child:\n```dart\nclass Frog extends StatelessWidget {\nconst Frog({\nsuper.key,\nthis.color = const Color(0xFF2DBD3A),\nthis.child,\n});\nfinal Color color;\nfinal Widget? child;\n@override\nWidget build(BuildContext context) {\nreturn ColoredBox(color: color, child: child);\n}\n}\n```\n{@end-tool}\nBy convention, widget constructors only use named arguments. Also by\nconvention, the first argument is [key], and the last argument is `child`,\n`children`, or the equivalent.\nSee also:\n* [StatefulWidget] and [State], for widgets that can build differently\nseveral times over their lifetime.\n* [InheritedWidget], for widgets that introduce ambient state that can\nbe read by descendant widgets."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract class StatelessWidget extends Widget"
      }
    },
    {
      "symbol": "scip-dart pub dart:core 3.5.0 dart:core/`annotations.dart`/override.",
      "documentation": [
        "Annotation on instance members which override an interface member.\nAnnotations have no effect on the meaning of a Dart program.\nThis annotation is recognized by the Dart analyzer, and it allows the\nanalyzer to provide hints or warnings for some potential problems of an\notherwise valid program.\nAs such, the meaning of this annotation is defined by the Dart analyzer.\nThe `@override` annotation expresses the intent\nthat a declaration *should* override an interface method,\nsomething which is not visible from the declaration itself.\nThis extra information allows the analyzer to provide a warning\nwhen that intent is not satisfied,\nwhere a member is intended to override a superclass member or\nimplement an interface member, but fails to do so.\nSuch a situation can arise if a member name is mistyped,\nor if the superclass renames the member.\nThe `@override` annotation applies to instance methods, instance getters,\ninstance setters and instance variables (fields).\nWhen applied to an instance variable,\nit means that the variable's implicit getter and setter (if any)\nare marked as overriding. It has no effect on the variable itself.\nFurther [lints](https://dart.dev/lints)\ncan be used to enable more warnings based on `@override` annotations."
      ],
      "kind": "Variable",
      "signature_documentation": {
        "language": "Dart",
        "text": "Object override"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/Widget#",
      "documentation": [
        "Describes the configuration for an [Element].\nWidgets are the central class hierarchy in the Flutter framework. A widget\nis an immutable description of part of a user interface. Widgets can be\ninflated into elements, which manage the underlying render tree.\nWidgets themselves have no mutable state (all their fields must be final).\nIf you wish to associate mutable state with a widget, consider using a\n[StatefulWidget], which creates a [State] object (via\n[StatefulWidget.createState]) whenever it is inflated into an element and\nincorporated into the tree.\nA given widget can be included in the tree zero or more times. In particular\na given widget can be placed in the tree multiple times. Each time a widget\nis placed in the tree, it is inflated into an [Element], which means a\nwidget that is incorporated into the tree multiple times will be inflated\nmultiple times.\nThe [key] property controls how one widget replaces another widget in the\ntree. If the [runtimeType] and [key] properties of the two widgets are\n[operator==], respectively, then the new widget replaces the old widget by\nupdating the underlying element (i.e., by calling [Element.update] with the\nnew widget). Otherwise, the old element is removed from the tree, the new\nwidget is inflated into an element, and the new element is inserted into the\ntree.\nSee also:\n* [StatefulWidget] and [State], for widgets that can build differently\nseveral times over their lifetime.\n* [InheritedWidget], for widgets that introduce ambient state that can\nbe read by descendant widgets.\n* [StatelessWidget], for widgets that always build the same way given a\nparticular configuration and ambient state."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract class Widget extends DiagnosticableTree"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/BuildContext#",
      "documentation": [
        "A handle to the location of a widget in the widget tree.\nThis class presents a set of methods that can be used from\n[StatelessWidget.build] methods and from methods on [State] objects.\n[BuildContext] objects are passed to [WidgetBuilder] functions (such as\n[StatelessWidget.build]), and are available from the [State.context] member.\nSome static functions (e.g. [showDialog], [Theme.of], and so forth) also\ntake build contexts so that they can act on behalf of the calling widget, or\nobtain data specifically for the given context.\nEach widget has its own [BuildContext], which becomes the parent of the\nwidget returned by the [StatelessWidget.build] or [State.build] function.\n(And similarly, the parent of any children for [RenderObjectWidget]s.)\nIn particular, this means that within a build method, the build context of\nthe widget of the build method is not the same as the build context of the\nwidgets returned by that build method. This can lead to some tricky cases.\nFor example, [Theme.of(context)] looks for the nearest enclosing [Theme] of\nthe given build context. If a build method for a widget Q includes a [Theme]\nwithin its returned widget tree, and attempts to use [Theme.of] passing its\nown context, the build method for Q will not find that [Theme] object. It\nwill instead find whatever [Theme] was an ancestor to the widget Q. If the\nbuild context for a subpart of the returned tree is needed, a [Builder]\nwidget can be used: the build context passed to the [Builder.builder]\ncallback will be that of the [Builder] itself.\nFor example, in the following snippet, the [ScaffoldState.showBottomSheet]\nmethod is called on the [Scaffold] widget that the build method itself\ncreates. If a [Builder] had not been used, and instead the `context`\nargument of the build method itself had been used, no [Scaffold] would have\nbeen found, and the [Scaffold.of] function would have returned null.\n```dart\n@override\nWidget build(BuildContext context) {\n// here, Scaffold.of(context) returns null\nreturn Scaffold(\nappBar: AppBar(title: const Text('Demo')),\nbody: Builder(\nbuilder: (BuildContext context) {\nreturn TextButton(\nchild: const Text('BUTTON'),\nonPressed: () {\nScaffold.of(context).showBottomSheet(\n(BuildContext context) {\nreturn Container(\nalignment: Alignment.center,\nheight: 200,\ncolor: Colors.amber,\nchild: Center(\nchild: Column(\nmainAxisSize: MainAxisSize.min,\nchildren: <Widget>[\nconst Text('BottomSheet'),\nElevatedButton(\nchild: const Text('Close BottomSheet'),\nonPressed: () {\nNavigator.pop(context);\n},\n)\n],\n),\n),\n);\n},\n);\n},\n);\n},\n)\n);\n}\n```\nThe [BuildContext] for a particular widget can change location over time as\nthe widget is moved around the tree. Because of this, values returned from\nthe methods on this class should not be cached beyond the execution of a\nsingle synchronous function.\n{@youtube 560 315 https://www.youtube.com/watch?v=rIaaH87z1-g}\nAvoid storing instances of [BuildContext]s because they may become invalid\nif the widget they are associated with is unmounted from the widget tree.\n{@template flutter.widgets.BuildContext.asynchronous_gap}\nIf a [BuildContext] is used across an asynchronous gap (i.e. after performing\nan asynchronous operation), consider checking [mounted] to determine whether\nthe context is still valid before interacting with it:\n```dart\n@override\nWidget build(BuildContext context) {\nreturn OutlinedButton(\nonPressed: () async {\nawait Future<void>.delayed(const Duration(seconds: 1));\nif (context.mounted) {\nNavigator.of(context).pop();\n}\n},\nchild: const Text('Delayed pop'),\n);\n}\n```\n{@endtemplate}\n[BuildContext] objects are actually [Element] objects. The [BuildContext]\ninterface is used to discourage direct manipulation of [Element] objects."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract class BuildContext"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`app.dart`/MaterialApp#",
      "documentation": [
        "An application that uses Material Design.\nA convenience widget that wraps a number of widgets that are commonly\nrequired for Material Design applications. It builds upon a [WidgetsApp] by\nadding material-design specific functionality, such as [AnimatedTheme] and\n[GridPaper].\n[MaterialApp] configures its [WidgetsApp.textStyle] with an ugly red/yellow\ntext style that's intended to warn the developer that their app hasn't defined\na default text style. Typically the app's [Scaffold] builds a [Material] widget\nwhose default [Material.textStyle] defines the text style for the entire scaffold.\nThe [MaterialApp] configures the top-level [Navigator] to search for routes\nin the following order:\n1. For the `/` route, the [home] property, if non-null, is used.\n2. Otherwise, the [routes] table is used, if it has an entry for the route.\n3. Otherwise, [onGenerateRoute] is called, if provided. It should return a\nnon-null value for any _valid_ route not handled by [home] and [routes].\n4. Finally if all else fails [onUnknownRoute] is called.\nIf a [Navigator] is created, at least one of these options must handle the\n`/` route, since it is used when an invalid [initialRoute] is specified on\nstartup (e.g. by another application launching this one with an intent on\nAndroid; see [dart:ui.PlatformDispatcher.defaultRouteName]).\nThis widget also configures the observer of the top-level [Navigator] (if\nany) to perform [Hero] animations.\n{@template flutter.material.MaterialApp.defaultSelectionStyle}\nThe [MaterialApp] automatically creates a [DefaultSelectionStyle]. It uses\nthe colors in the [ThemeData.textSelectionTheme] if they are not null;\notherwise, the [MaterialApp] sets [DefaultSelectionStyle.selectionColor] to\n[ColorScheme.primary] with 0.4 opacity and\n[DefaultSelectionStyle.cursorColor] to [ColorScheme.primary].\n{@endtemplate}\nIf [home], [routes], [onGenerateRoute], and [onUnknownRoute] are all null,\nand [builder] is not null, then no [Navigator] is created.\n{@tool snippet}\nThis example shows how to create a [MaterialApp] that disables the \"debug\"\nbanner with a [home] route that will be displayed when the app is launched.\n![The MaterialApp displays a Scaffold ](https://flutter.github.io/assets-for-api-docs/assets/material/basic_material_app.png)\n```dart\nMaterialApp(\nhome: Scaffold(\nappBar: AppBar(\ntitle: const Text('Home'),\n),\n),\ndebugShowCheckedModeBanner: false,\n)\n```\n{@end-tool}\n{@tool snippet}\nThis example shows how to create a [MaterialApp] that uses the [routes]\n`Map` to define the \"home\" route and an \"about\" route.\n```dart\nMaterialApp(\nroutes: <String, WidgetBuilder>{\n'/': (BuildContext context) {\nreturn Scaffold(\nappBar: AppBar(\ntitle: const Text('Home Route'),\n),\n);\n},\n'/about': (BuildContext context) {\nreturn Scaffold(\nappBar: AppBar(\ntitle: const Text('About Route'),\n),\n);\n}\n},\n)\n```\n{@end-tool}\n{@tool snippet}\nThis example shows how to create a [MaterialApp] that defines a [theme] that\nwill be used for material widgets in the app.\n![The MaterialApp displays a Scaffold with a dark background and a blue / grey AppBar at the top](https://flutter.github.io/assets-for-api-docs/assets/material/theme_material_app.png)\n```dart\nMaterialApp(\ntheme: ThemeData(\nbrightness: Brightness.dark,\nprimaryColor: Colors.blueGrey\n),\nhome: Scaffold(\nappBar: AppBar(\ntitle: const Text('MaterialApp Theme'),\n),\n),\n)\n```\n{@end-tool}\n## Troubleshooting\n### Why is my app's text red with yellow underlines?\n[Text] widgets that lack a [Material] ancestor will be rendered with an ugly\nred/yellow text style.\n![](https://flutter.github.io/assets-for-api-docs/assets/material/material_app_unspecified_textstyle.png)\nThe typical fix is to give the widget a [Scaffold] ancestor. The [Scaffold] creates\na [Material] widget that defines its default text style.\n```dart\nconst MaterialApp(\ntitle: 'Material App',\nhome: Scaffold(\nbody: Center(\nchild: Text('Hello World'),\n),\n),\n)\n```\nSee also:\n* [Scaffold], which provides standard app elements like an [AppBar] and a [Drawer].\n* [Navigator], which is used to manage the app's stack of pages.\n* [MaterialPageRoute], which defines an app page that transitions in a material-specific way.\n* [WidgetsApp], which defines the basic app elements but does not depend on the material library.\n* The Flutter Internationalization Tutorial,\n<https://flutter.dev/to/internationalization/>."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "class MaterialApp extends StatefulWidget"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`app.dart`/MaterialApp#`<constructor>`().(title)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{String title = ''}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`app.dart`/MaterialApp#`<constructor>`().(theme)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{ThemeData theme}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`theme_data.dart`/ThemeData#",
      "documentation": [
        "Defines the configuration of the overall visual [Theme] for a [MaterialApp]\nor a widget subtree within the app.\nThe [MaterialApp] theme property can be used to configure the appearance\nof the entire app. Widget subtrees within an app can override the app's\ntheme by including a [Theme] widget at the top of the subtree.\nWidgets whose appearance should align with the overall theme can obtain the\ncurrent theme's configuration with [Theme.of]. Material components typically\ndepend exclusively on the [colorScheme] and [textTheme]. These properties\nare guaranteed to have non-null values.\nThe static [Theme.of] method finds the [ThemeData] value specified for the\nnearest [BuildContext] ancestor. This lookup is inexpensive, essentially\njust a single HashMap access. It can sometimes be a little confusing\nbecause [Theme.of] can not see a [Theme] widget that is defined in the\ncurrent build method's context. To overcome that, create a new custom widget\nfor the subtree that appears below the new [Theme], or insert a widget\nthat creates a new BuildContext, like [Builder].\n{@tool dartpad}\nThis example demonstrates how a typical [MaterialApp] specifies\nand uses a custom [Theme]. The theme's [ColorScheme] is based on a\nsingle \"seed\" color and configures itself to match the platform's\ncurrent light or dark color configuration. The theme overrides the\ndefault configuration of [FloatingActionButton] to show how to\ncustomize the appearance a class of components.\n** See code in examples/api/lib/material/theme_data/theme_data.0.dart **\n{@end-tool}\nSee <https://material.io/design/color/> for\nmore discussion on how to pick the right colors."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "class ThemeData with Diagnosticable"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`theme_data.dart`/ThemeData#`<constructor>`().(colorScheme)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{ColorScheme colorScheme}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`color_scheme.dart`/ColorScheme#",
      "documentation": [
        "{@template flutter.material.color_scheme.ColorScheme}\nA set of 45 colors based on the\n[Material spec](https://m3.material.io/styles/color/the-color-system/color-roles)\nthat can be used to configure the color properties of most components.\n{@endtemplate}\n### Colors in Material 3\n{@macro flutter.material.colors.colorRoles}\nThe main accent color groups in the scheme are [primary], [secondary],\nand [tertiary].\n* Primary colors are used for key components across the UI, such as the FAB,\nprominent buttons, and active states.\n* Secondary colors are used for less prominent components in the UI, such as\nfilter chips, while expanding the opportunity for color expression.\n* Tertiary colors are used for contrasting accents that can be used to\nbalance primary and secondary colors or bring heightened attention to\nan element, such as an input field. The tertiary colors are left\nfor makers to use at their discretion and are intended to support\nbroader color expression in products.\nEach accent color group (primary, secondary and tertiary) includes '-Fixed'\n'-Dim' color roles, such as [primaryFixed] and [primaryFixedDim]. Fixed roles\nare appropriate to use in places where Container roles are normally used,\nbut they stay the same color between light and dark themes. The '-Dim' roles\nprovide a stronger, more emphasized color with the same fixed behavior.\nThe remaining colors of the scheme are composed of neutral colors used for\nbackgrounds and surfaces, as well as specific colors for errors, dividers\nand shadows. Surface colors are used for backgrounds and large, low-emphasis\nareas of the screen.\nMaterial 3 also introduces tone-based surfaces and surface containers.\nThey replace the old opacity-based model which applied a tinted overlay on\ntop of surfaces based on their elevation. These colors include: [surfaceBright],\n[surfaceDim], [surfaceContainerLowest], [surfaceContainerLow], [surfaceContainer],\n[surfaceContainerHigh], and [surfaceContainerHighest].\nMany of the colors have matching 'on' colors, which are used for drawing\ncontent on top of the matching color. For example, if something is using\n[primary] for a background color, [onPrimary] would be used to paint text\nand icons on top of it. For this reason, the 'on' colors should have a\ncontrast ratio with their matching colors of at least 4.5:1 in order to\nbe readable. On '-FixedVariant' roles, such as [onPrimaryFixedVariant],\nalso have the same color between light and dark themes, but compared\nwith on '-Fixed' roles, such as [onPrimaryFixed], they provide a\nlower-emphasis option for text and icons.\n{@tool dartpad}\nThis example shows all Material [ColorScheme] roles in light and dark\nbrightnesses.\n** See code in examples/api/lib/material/color_scheme/color_scheme.0.dart **\n{@end-tool}\n### Setting Colors in Flutter\n{@macro flutter.material.colors.settingColors}"
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "class ColorScheme with Diagnosticable"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`color_scheme.dart`/ColorScheme#fromSeed().",
      "documentation": [
        "Generate a [ColorScheme] derived from the given `seedColor`.\nUsing the `seedColor` as a starting point, a set of tonal palettes are\nconstructed. By default, the tonal palettes are based on the Material 3\nColor system and provide all of the [ColorScheme] colors. These colors are\ndesigned to work well together and meet contrast requirements for\naccessibility.\nIf any of the optional color parameters are non-null they will be\nused in place of the generated colors for that field in the resulting\ncolor scheme. This allows apps to override specific colors for their\nneeds.\nGiven the nature of the algorithm, the `seedColor` may not wind up as\none of the ColorScheme colors.\nThe `dynamicSchemeVariant` parameter creates different types of\n[DynamicScheme]s, which are used to generate different styles of [ColorScheme]s.\nBy default, `dynamicSchemeVariant` is set to `tonalSpot`. A [ColorScheme]\nconstructed by `dynamicSchemeVariant.tonalSpot` has pastel palettes and\nwon't be too \"colorful\" even if the `seedColor` has a high chroma value.\nIf the resulting color scheme is too dark, consider setting `dynamicSchemeVariant`\nto [DynamicSchemeVariant.fidelity], whose palettes match the seed color.\nThe `contrastLevel` parameter indicates the contrast level between color\npairs, such as [primary] and [onPrimary]. 0.0 is the default (normal);\n-1.0 is the lowest; 1.0 is the highest. From Material Design guideline, the\nmedium and high contrast correspond to 0.5 and 1.0 respectively.\n{@tool dartpad}\nThis sample shows how to use [ColorScheme.fromSeed] to create dynamic\ncolor schemes with different [DynamicSchemeVariant]s and different\ncontrast level.\n** See code in examples/api/lib/material/color_scheme/color_scheme.0.dart **\n{@end-tool}\nSee also:\n* <https://m3.material.io/styles/color/the-color-system/color-roles>, the\nMaterial 3 Color system specification.\n* <https://pub.dev/packages/material_color_utilities>, the package\nused to generate the tonal palettes needed for the scheme."
      ],
      "kind": "Constructor",
      "signature_documentation": {
        "language": "Dart",
        "text": "ColorScheme ColorScheme.fromSeed({\n  required Color seedColor,\n  Brightness brightness = Brightness.light,\n  DynamicSchemeVariant dynamicSchemeVariant = DynamicSchemeVariant.tonalSpot,\n  double contrastLevel = 0.0,\n  Color primary,\n  Color onPrimary,\n  Color primaryContainer,\n  Color onPrimaryContainer,\n  Color primaryFixed,\n  Color primaryFixedDim,\n  Color onPrimaryFixed,\n  Color onPrimaryFixedVariant,\n  Color secondary,\n  Color onSecondary,\n  Color secondaryContainer,\n  Color onSecondaryContainer,\n  Color secondaryFixed,\n  Color secondaryFixedDim,\n  Color onSecondaryFixed,\n  Color onSecondaryFixedVariant,\n  Color tertiary,\n  Color onTertiary,\n  Color tertiaryContainer,\n  Color onTertiaryContainer,\n  Color tertiaryFixed,\n  Color tertiaryFixedDim,\n  Color onTertiaryFixed,\n  Color onTertiaryFixedVariant,\n  Color error,\n  Color onError,\n  Color errorContainer,\n  Color onErrorContainer,\n  Color outline,\n  Color outlineVariant,\n  Color surface,\n  Color onSurface,\n  Color surfaceDim,\n  Color surfaceBright,\n  Color surfaceContainerLowest,\n  Color surfaceContainerLow,\n  Color surfaceContainer,\n  Color surfaceContainerHigh,\n  Color surfaceContainerHighest,\n  Color onSurfaceVariant,\n  Color inverseSurface,\n  Color onInverseSurface,\n  Color inversePrimary,\n  Color shadow,\n  Color scrim,\n  Color surfaceTint,\n  Color background,\n  Color onBackground,\n  Color surfaceVariant,\n})"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`color_scheme.dart`/ColorScheme#fromSeed().(seedColor)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{required Color seedColor}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`colors.dart`/Colors#",
      "documentation": [
        "[Color] and [ColorSwatch] constants which represent Material design's\n[color palette](https://material.io/design/color/).\nInstead of using an absolute color from these palettes, consider using\n[Theme.of] to obtain the local [ThemeData.colorScheme], which defines\nthe colors that most of the Material components use by default.\nMost swatches have colors from 100 to 900 in increments of one hundred, plus\nthe color 50. The smaller the number, the more pale the color. The greater\nthe number, the darker the color. The accent swatches (e.g. [redAccent]) only\nhave the values 100, 200, 400, and 700.\nIn addition, a series of blacks and whites with common opacities are\navailable. For example, [black54] is a pure black with 54% opacity.\n{@tool snippet}\nTo select a specific color from one of the swatches, index into the swatch\nusing an integer for the specific color desired, as follows:\n```dart\nColor selection = Colors.green[400]!; // Selects a mid-range green.\n```\n{@end-tool}\n{@tool snippet}\nEach [ColorSwatch] constant is a color and can used directly. For example:\n```dart\nContainer(\ncolor: Colors.blue, // same as Colors.blue[500] or Colors.blue.shade500\n)\n```\n{@end-tool}\n## Color palettes\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.pink.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.pinkAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.red.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.redAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.deepOrange.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.deepOrangeAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.orange.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.orangeAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.amber.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.amberAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.yellow.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.yellowAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.lime.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.limeAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.lightGreen.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.lightGreenAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.green.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.greenAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.teal.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.tealAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.cyan.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.cyanAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.lightBlue.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.lightBlueAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.blue.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.blueAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.indigo.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.indigoAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.purple.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.purpleAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.deepPurple.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.deepPurpleAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.blueGrey.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.brown.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.grey.png)\n## Blacks and whites\nThese colors are identified by their transparency. The low transparency\nlevels (e.g. [Colors.white12] and [Colors.white10]) are very hard to see and\nshould be avoided in general. They are intended for very subtle effects.\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.blacks.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.whites.png)\nThe [Colors.transparent] color isn't shown here because it is entirely\ninvisible!\nSee also:\n* Cookbook: [Use themes to share colors and font styles](https://docs.flutter.dev/cookbook/design/themes)"
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract final class Colors"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`colors.dart`/Colors#deepPurple.",
      "documentation": [
        "The deep purple primary color and swatch.\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.deepPurple.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.deepPurpleAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.purple.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.purpleAccent.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.indigo.png)\n![](https://flutter.github.io/assets-for-api-docs/assets/material/Colors.indigoAccent.png)\n{@tool snippet}\n```dart\nIcon(\nIcons.widgets,\ncolor: Colors.deepPurple[400],\n)\n```\n{@end-tool}\nSee also:\n* [deepPurpleAccent], the corresponding accent colors.\n* [purple] and [indigo], similar colors.\n* [Theme.of], which allows you to select colors from the current theme\nrather than hard-coding colors in your build methods."
      ],
      "kind": "Field",
      "signature_documentation": {
        "language": "Dart",
        "text": "MaterialColor deepPurple"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`theme_data.dart`/ThemeData#`<constructor>`().(useMaterial3)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{bool useMaterial3}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`app.dart`/MaterialApp#`<constructor>`().(home)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{Widget home}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/StatefulWidget#",
      "documentation": [
        "A widget that has mutable state.\nState is information that (1) can be read synchronously when the widget is\nbuilt and (2) might change during the lifetime of the widget. It is the\nresponsibility of the widget implementer to ensure that the [State] is\npromptly notified when such state changes, using [State.setState].\nA stateful widget is a widget that describes part of the user interface by\nbuilding a constellation of other widgets that describe the user interface\nmore concretely. The building process continues recursively until the\ndescription of the user interface is fully concrete (e.g., consists\nentirely of [RenderObjectWidget]s, which describe concrete [RenderObject]s).\nStateful widgets are useful when the part of the user interface you are\ndescribing can change dynamically, e.g. due to having an internal\nclock-driven state, or depending on some system state. For compositions that\ndepend only on the configuration information in the object itself and the\n[BuildContext] in which the widget is inflated, consider using\n[StatelessWidget].\n{@youtube 560 315 https://www.youtube.com/watch?v=AqCMFXEmf3w}\n[StatefulWidget] instances themselves are immutable and store their mutable\nstate either in separate [State] objects that are created by the\n[createState] method, or in objects to which that [State] subscribes, for\nexample [Stream] or [ChangeNotifier] objects, to which references are stored\nin final fields on the [StatefulWidget] itself.\nThe framework calls [createState] whenever it inflates a\n[StatefulWidget], which means that multiple [State] objects might be\nassociated with the same [StatefulWidget] if that widget has been inserted\ninto the tree in multiple places. Similarly, if a [StatefulWidget] is\nremoved from the tree and later inserted in to the tree again, the framework\nwill call [createState] again to create a fresh [State] object, simplifying\nthe lifecycle of [State] objects.\nA [StatefulWidget] keeps the same [State] object when moving from one\nlocation in the tree to another if its creator used a [GlobalKey] for its\n[key]. Because a widget with a [GlobalKey] can be used in at most one\nlocation in the tree, a widget that uses a [GlobalKey] has at most one\nassociated element. The framework takes advantage of this property when\nmoving a widget with a global key from one location in the tree to another\nby grafting the (unique) subtree associated with that widget from the old\nlocation to the new location (instead of recreating the subtree at the new\nlocation). The [State] objects associated with [StatefulWidget] are grafted\nalong with the rest of the subtree, which means the [State] object is reused\n(instead of being recreated) in the new location. However, in order to be\neligible for grafting, the widget must be inserted into the new location in\nthe same animation frame in which it was removed from the old location.\n## Performance considerations\nThere are two primary categories of [StatefulWidget]s.\nThe first is one which allocates resources in [State.initState] and disposes\nof them in [State.dispose], but which does not depend on [InheritedWidget]s\nor call [State.setState]. Such widgets are commonly used at the root of an\napplication or page, and communicate with subwidgets via [ChangeNotifier]s,\n[Stream]s, or other such objects. Stateful widgets following such a pattern\nare relatively cheap (in terms of CPU and GPU cycles), because they are\nbuilt once then never update. They can, therefore, have somewhat complicated\nand deep build methods.\nThe second category is widgets that use [State.setState] or depend on\n[InheritedWidget]s. These will typically rebuild many times during the\napplication's lifetime, and it is therefore important to minimize the impact\nof rebuilding such a widget. (They may also use [State.initState] or\n[State.didChangeDependencies] and allocate resources, but the important part\nis that they rebuild.)\nThere are several techniques one can use to minimize the impact of\nrebuilding a stateful widget:\n* Push the state to the leaves. For example, if your page has a ticking\nclock, rather than putting the state at the top of the page and\nrebuilding the entire page each time the clock ticks, create a dedicated\nclock widget that only updates itself.\n* Minimize the number of nodes transitively created by the build method and\nany widgets it creates. Ideally, a stateful widget would only create a\nsingle widget, and that widget would be a [RenderObjectWidget].\n(Obviously this isn't always practical, but the closer a widget gets to\nthis ideal, the more efficient it will be.)\n* If a subtree does not change, cache the widget that represents that\nsubtree and re-use it each time it can be used. To do this, assign\na widget to a `final` state variable and re-use it in the build method. It\nis massively more efficient for a widget to be re-used than for a new (but\nidentically-configured) widget to be created. Another caching strategy\nconsists in extracting the mutable part of the widget into a [StatefulWidget]\nwhich accepts a child parameter.\n* Use `const` widgets where possible. (This is equivalent to caching a\nwidget and re-using it.)\n* Avoid changing the depth of any created subtrees or changing the type of\nany widgets in the subtree. For example, rather than returning either the\nchild or the child wrapped in an [IgnorePointer], always wrap the child\nwidget in an [IgnorePointer] and control the [IgnorePointer.ignoring]\nproperty. This is because changing the depth of the subtree requires\nrebuilding, laying out, and painting the entire subtree, whereas just\nchanging the property will require the least possible change to the\nrender tree (in the case of [IgnorePointer], for example, no layout or\nrepaint is necessary at all).\n* If the depth must be changed for some reason, consider wrapping the\ncommon parts of the subtrees in widgets that have a [GlobalKey] that\nremains consistent for the life of the stateful widget. (The\n[KeyedSubtree] widget may be useful for this purpose if no other widget\ncan conveniently be assigned the key.)\n{@macro flutter.flutter.widgets.framework.prefer_const_over_helper}\nThis video gives more explanations on why `const` constructors are important\nand why a [Widget] is better than a helper method.\n{@youtube 560 315 https://www.youtube.com/watch?v=IOyq-eTRhvo}\nFor more details on the mechanics of rebuilding a widget, see\nthe discussion at [Element.rebuild].\n{@tool snippet}\nThis is a skeleton of a stateful widget subclass called `YellowBird`.\nIn this example, the [State] has no actual state. State is normally\nrepresented as private member fields. Also, normally widgets have more\nconstructor arguments, each of which corresponds to a `final` property.\n```dart\nclass YellowBird extends StatefulWidget {\nconst YellowBird({ super.key });\n@override\nState<YellowBird> createState() => _YellowBirdState();\n}\nclass _YellowBirdState extends State<YellowBird> {\n@override\nWidget build(BuildContext context) {\nreturn Container(color: const Color(0xFFFFE306));\n}\n}\n```\n{@end-tool}\n{@tool snippet}\nThis example shows the more generic widget `Bird` which can be given a\ncolor and a child, and which has some internal state with a method that\ncan be called to mutate it:\n```dart\nclass Bird extends StatefulWidget {\nconst Bird({\nsuper.key,\nthis.color = const Color(0xFFFFE306),\nthis.child,\n});\nfinal Color color;\nfinal Widget? child;\n@override\nState<Bird> createState() => _BirdState();\n}\nclass _BirdState extends State<Bird> {\ndouble _size = 1.0;\nvoid grow() {\nsetState(() { _size += 0.1; });\n}\n@override\nWidget build(BuildContext context) {\nreturn Container(\ncolor: widget.color,\ntransform: Matrix4.diagonal3Values(_size, _size, 1.0),\nchild: widget.child,\n);\n}\n}\n```\n{@end-tool}\nBy convention, widget constructors only use named arguments. Also by\nconvention, the first argument is [key], and the last argument is `child`,\n`children`, or the equivalent.\nSee also:\n* [State], where the logic behind a [StatefulWidget] is hosted.\n* [StatelessWidget], for widgets that always build the same way given a\nparticular configuration and ambient state.\n* [InheritedWidget], for widgets that introduce ambient state that can\nbe read by descendant widgets."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract class StatefulWidget extends Widget"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/State#",
      "documentation": [
        "The logic and internal state for a [StatefulWidget].\nState is information that (1) can be read synchronously when the widget is\nbuilt and (2) might change during the lifetime of the widget. It is the\nresponsibility of the widget implementer to ensure that the [State] is\npromptly notified when such state changes, using [State.setState].\n[State] objects are created by the framework by calling the\n[StatefulWidget.createState] method when inflating a [StatefulWidget] to\ninsert it into the tree. Because a given [StatefulWidget] instance can be\ninflated multiple times (e.g., the widget is incorporated into the tree in\nmultiple places at once), there might be more than one [State] object\nassociated with a given [StatefulWidget] instance. Similarly, if a\n[StatefulWidget] is removed from the tree and later inserted in to the tree\nagain, the framework will call [StatefulWidget.createState] again to create\na fresh [State] object, simplifying the lifecycle of [State] objects.\n[State] objects have the following lifecycle:\n* The framework creates a [State] object by calling\n[StatefulWidget.createState].\n* The newly created [State] object is associated with a [BuildContext].\nThis association is permanent: the [State] object will never change its\n[BuildContext]. However, the [BuildContext] itself can be moved around\nthe tree along with its subtree. At this point, the [State] object is\nconsidered [mounted].\n* The framework calls [initState]. Subclasses of [State] should override\n[initState] to perform one-time initialization that depends on the\n[BuildContext] or the widget, which are available as the [context] and\n[widget] properties, respectively, when the [initState] method is\ncalled.\n* The framework calls [didChangeDependencies]. Subclasses of [State] should\noverride [didChangeDependencies] to perform initialization involving\n[InheritedWidget]s. If [BuildContext.dependOnInheritedWidgetOfExactType] is\ncalled, the [didChangeDependencies] method will be called again if the\ninherited widgets subsequently change or if the widget moves in the tree.\n* At this point, the [State] object is fully initialized and the framework\nmight call its [build] method any number of times to obtain a\ndescription of the user interface for this subtree. [State] objects can\nspontaneously request to rebuild their subtree by calling their\n[setState] method, which indicates that some of their internal state\nhas changed in a way that might impact the user interface in this\nsubtree.\n* During this time, a parent widget might rebuild and request that this\nlocation in the tree update to display a new widget with the same\n[runtimeType] and [Widget.key]. When this happens, the framework will\nupdate the [widget] property to refer to the new widget and then call the\n[didUpdateWidget] method with the previous widget as an argument. [State]\nobjects should override [didUpdateWidget] to respond to changes in their\nassociated widget (e.g., to start implicit animations). The framework\nalways calls [build] after calling [didUpdateWidget], which means any\ncalls to [setState] in [didUpdateWidget] are redundant. (See also the\ndiscussion at [Element.rebuild].)\n* During development, if a hot reload occurs (whether initiated from the\ncommand line `flutter` tool by pressing `r`, or from an IDE), the\n[reassemble] method is called. This provides an opportunity to\nreinitialize any data that was prepared in the [initState] method.\n* If the subtree containing the [State] object is removed from the tree\n(e.g., because the parent built a widget with a different [runtimeType]\nor [Widget.key]), the framework calls the [deactivate] method. Subclasses\nshould override this method to clean up any links between this object\nand other elements in the tree (e.g. if you have provided an ancestor\nwith a pointer to a descendant's [RenderObject]).\n* At this point, the framework might reinsert this subtree into another\npart of the tree. If that happens, the framework will ensure that it\ncalls [build] to give the [State] object a chance to adapt to its new\nlocation in the tree. If the framework does reinsert this subtree, it\nwill do so before the end of the animation frame in which the subtree was\nremoved from the tree. For this reason, [State] objects can defer\nreleasing most resources until the framework calls their [dispose]\nmethod.\n* If the framework does not reinsert this subtree by the end of the current\nanimation frame, the framework will call [dispose], which indicates that\nthis [State] object will never build again. Subclasses should override\nthis method to release any resources retained by this object (e.g.,\nstop any active animations).\n* After the framework calls [dispose], the [State] object is considered\nunmounted and the [mounted] property is false. It is an error to call\n[setState] at this point. This stage of the lifecycle is terminal: there\nis no way to remount a [State] object that has been disposed.\nSee also:\n* [StatefulWidget], where the current configuration of a [State] is hosted,\nand whose documentation has sample code for [State].\n* [StatelessWidget], for widgets that always build the same way given a\nparticular configuration and ambient state.\n* [InheritedWidget], for widgets that introduce ambient state that can\nbe read by descendant widgets.\n* [Widget], for an overview of widgets in general."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "abstract class State<T extends StatefulWidget> with Diagnosticable"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/State#setState().",
      "documentation": [
        "Notify the framework that the internal state of this object has changed.\nWhenever you change the internal state of a [State] object, make the\nchange in a function that you pass to [setState]:\n```dart\nsetState(() { _myState = newValue; });\n```\nThe provided callback is immediately called synchronously. It must not\nreturn a future (the callback cannot be `async`), since then it would be\nunclear when the state was actually being set.\nCalling [setState] notifies the framework that the internal state of this\nobject has changed in a way that might impact the user interface in this\nsubtree, which causes the framework to schedule a [build] for this [State]\nobject.\nIf you just change the state directly without calling [setState], the\nframework might not schedule a [build] and the user interface for this\nsubtree might not be updated to reflect the new state.\nGenerally it is recommended that the [setState] method only be used to\nwrap the actual changes to the state, not any computation that might be\nassociated with the change. For example, here a value used by the [build]\nfunction is incremented, and then the change is written to disk, but only\nthe increment is wrapped in the [setState]:\n```dart\nFuture<void> _incrementCounter() async {\nsetState(() {\n_counter++;\n});\nDirectory directory = await getApplicationDocumentsDirectory(); // from path_provider package\nfinal String dirName = directory.path;\nawait File('$dirName/counter.txt').writeAsString('$_counter');\n}\n```\nSometimes, the changed state is in some other object not owned by the\nwidget [State], but the widget nonetheless needs to be updated to react to\nthe new state. This is especially common with [Listenable]s, such as\n[AnimationController]s.\nIn such cases, it is good practice to leave a comment in the callback\npassed to [setState] that explains what state changed:\n```dart\nvoid _update() {\nsetState(() { /* The animation changed. */ });\n}\n//...\nanimation.addListener(_update);\n```\nIt is an error to call this method after the framework calls [dispose].\nYou can determine whether it is legal to call this method by checking\nwhether the [mounted] property is true. That said, it is better practice\nto cancel whatever work might trigger the [setState] rather than merely\nchecking for [mounted] before calling [setState], as otherwise CPU cycles\nwill be wasted.\n## Design discussion\nThe original version of this API was a method called `markNeedsBuild`, for\nconsistency with [RenderObject.markNeedsLayout],\n[RenderObject.markNeedsPaint], _et al_.\nHowever, early user testing of the Flutter framework revealed that people\nwould call `markNeedsBuild()` much more often than necessary. Essentially,\npeople used it like a good luck charm, any time they weren't sure if they\nneeded to call it, they would call it, just in case.\nNaturally, this led to performance issues in applications.\nWhen the API was changed to take a callback instead, this practice was\ngreatly reduced. One hypothesis is that prompting developers to actually\nupdate their state in a callback caused developers to think more carefully\nabout what exactly was being updated, and thus improved their understanding\nof the appropriate times to call the method.\nIn practice, the [setState] method's implementation is trivial: it calls\nthe provided callback synchronously, then calls [Element.markNeedsBuild].\n## Performance considerations\nThere is minimal _direct_ overhead to calling this function, and as it is\nexpected to be called at most once per frame, the overhead is irrelevant\nanyway. Nonetheless, it is best to avoid calling this function redundantly\n(e.g. in a tight loop), as it does involve creating a closure and calling\nit. The method is idempotent, there is no benefit to calling it more than\nonce per [State] per frame.\nThe _indirect_ cost of causing this function, however, is high: it causes\nthe widget to rebuild, possibly triggering rebuilds for the entire subtree\nrooted at this widget, and further triggering a relayout and repaint of\nthe entire corresponding [RenderObject] subtree.\nFor this reason, this method should only be called when the [build] method\nwill, as a result of whatever state change was detected, change its result\nmeaningfully.\nSee also:\n* [StatefulWidget], the API documentation for which has a section on\nperformance considerations that are relevant here."
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "void setState(void Function() fn)"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`scaffold.dart`/Scaffold#",
      "documentation": [
        "Implements the basic Material Design visual layout structure.\nThis class provides APIs for showing drawers and bottom sheets.\nTo display a persistent bottom sheet, obtain the\n[ScaffoldState] for the current [BuildContext] via [Scaffold.of] and use the\n[ScaffoldState.showBottomSheet] function.\n{@tool dartpad}\nThis example shows a [Scaffold] with a [body] and [FloatingActionButton].\nThe [body] is a [Text] placed in a [Center] in order to center the text\nwithin the [Scaffold]. The [FloatingActionButton] is connected to a\ncallback that increments a counter.\n** See code in examples/api/lib/material/scaffold/scaffold.0.dart **\n{@end-tool}\n{@tool dartpad}\nThis example shows a [Scaffold] with a blueGrey [backgroundColor], [body]\nand [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in\norder to center the text within the [Scaffold]. The [FloatingActionButton]\nis connected to a callback that increments a counter.\n![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_background_color.png)\n** See code in examples/api/lib/material/scaffold/scaffold.1.dart **\n{@end-tool}\n{@tool dartpad}\nThis example shows a [Scaffold] with an [AppBar], a [BottomAppBar] and a\n[FloatingActionButton]. The [body] is a [Text] placed in a [Center] in order\nto center the text within the [Scaffold]. The [FloatingActionButton] is\ncentered and docked within the [BottomAppBar] using\n[FloatingActionButtonLocation.centerDocked]. The [FloatingActionButton] is\nconnected to a callback that increments a counter.\n![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_bottom_app_bar.png)\n** See code in examples/api/lib/material/scaffold/scaffold.2.dart **\n{@end-tool}\n## Scaffold layout, the keyboard, and display \"notches\"\nThe scaffold will expand to fill the available space. That usually\nmeans that it will occupy its entire window or device screen. When\nthe device's keyboard appears the Scaffold's ancestor [MediaQuery]\nwidget's [MediaQueryData.viewInsets] changes and the Scaffold will\nbe rebuilt. By default the scaffold's [body] is resized to make\nroom for the keyboard. To prevent the resize set\n[resizeToAvoidBottomInset] to false. In either case the focused\nwidget will be scrolled into view if it's within a scrollable\ncontainer.\nThe [MediaQueryData.padding] value defines areas that might\nnot be completely visible, like the display \"notch\" on the iPhone\nX. The scaffold's [body] is not inset by this padding value\nalthough an [appBar] or [bottomNavigationBar] will typically\ncause the body to avoid the padding. The [SafeArea]\nwidget can be used within the scaffold's body to avoid areas\nlike display notches.\n## Floating action button with a draggable scrollable bottom sheet\nIf [Scaffold.bottomSheet] is a [DraggableScrollableSheet],\n[Scaffold.floatingActionButton] is set, and the bottom sheet is dragged to\ncover greater than 70% of the Scaffold's height, two things happen in parallel:\n* Scaffold starts to show scrim (see [ScaffoldState.showBodyScrim]), and\n* [Scaffold.floatingActionButton] is scaled down through an animation with a [Curves.easeIn], and\ndisappears when the bottom sheet covers the entire Scaffold.\nAnd as soon as the bottom sheet is dragged down to cover less than 70% of the [Scaffold], the scrim\ndisappears and [Scaffold.floatingActionButton] animates back to its normal size.\n## Troubleshooting\n### Nested Scaffolds\nThe Scaffold is designed to be a top level container for\na [MaterialApp]. This means that adding a Scaffold\nto each route on a Material app will provide the app with\nMaterial's basic visual layout structure.\nIt is typically not necessary to nest Scaffolds. For example, in a\ntabbed UI, where the [bottomNavigationBar] is a [TabBar]\nand the body is a [TabBarView], you might be tempted to make each tab bar\nview a scaffold with a differently titled AppBar. Rather, it would be\nbetter to add a listener to the [TabController] that updates the\nAppBar\n{@tool snippet}\nAdd a listener to the app's tab controller so that the [AppBar] title of the\napp's one and only scaffold is reset each time a new tab is selected.\n```dart\nTabController(vsync: tickerProvider, length: tabCount)..addListener(() {\nif (!tabController.indexIsChanging) {\nsetState(() {\n// Rebuild the enclosing scaffold with a new AppBar title\nappBarTitle = 'Tab ${tabController.index}';\n});\n}\n})\n```\n{@end-tool}\nAlthough there are some use cases, like a presentation app that\nshows embedded flutter content, where nested scaffolds are\nappropriate, it's best to avoid nesting scaffolds.\nSee also:\n* [AppBar], which is a horizontal bar typically shown at the top of an app\nusing the [appBar] property.\n* [BottomAppBar], which is a horizontal bar typically shown at the bottom\nof an app using the [bottomNavigationBar] property.\n* [FloatingActionButton], which is a circular button typically shown in the\nbottom right corner of the app using the [floatingActionButton] property.\n* [Drawer], which is a vertical panel that is typically displayed to the\nleft of the body (and often hidden on phones) using the [drawer]\nproperty.\n* [BottomNavigationBar], which is a horizontal array of buttons typically\nshown along the bottom of the app using the [bottomNavigationBar]\nproperty.\n* [BottomSheet], which is an overlay typically shown near the bottom of the\napp. A bottom sheet can either be persistent, in which case it is shown\nusing the [ScaffoldState.showBottomSheet] method, or modal, in which case\nit is shown using the [showModalBottomSheet] function.\n* [SnackBar], which is a lightweight message with an optional action which\nbriefly displays at the bottom of the screen. Use the\n[ScaffoldMessengerState.showSnackBar] method to show snack bars.\n* [MaterialBanner], which displays an important, succinct message, at the\ntop of the screen, below the app bar. Use the\n[ScaffoldMessengerState.showMaterialBanner] method to show material banners.\n* [ScaffoldState], which is the state associated with this widget.\n* <https://material.io/design/layout/responsive-layout-grid.html>\n* Cookbook: [Add a Drawer to a screen](https://docs.flutter.dev/cookbook/design/drawer)"
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "class Scaffold extends StatefulWidget"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`scaffold.dart`/Scaffold#`<constructor>`().(appBar)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{PreferredSizeWidget appBar}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`app_bar.dart`/AppBar#",
      "documentation": [
        "A Material Design app bar.\nAn app bar consists of a toolbar and potentially other widgets, such as a\n[TabBar] and a [FlexibleSpaceBar]. App bars typically expose one or more\ncommon [actions] with [IconButton]s which are optionally followed by a\n[PopupMenuButton] for less common operations (sometimes called the \"overflow\nmenu\").\nApp bars are typically used in the [Scaffold.appBar] property, which places\nthe app bar as a fixed-height widget at the top of the screen. For a scrollable\napp bar, see [SliverAppBar], which embeds an [AppBar] in a sliver for use in\na [CustomScrollView].\nThe AppBar displays the toolbar widgets, [leading], [title], and [actions],\nabove the [bottom] (if any). The [bottom] is usually used for a [TabBar]. If\na [flexibleSpace] widget is specified then it is stacked behind the toolbar\nand the bottom widget. The following diagram shows where each of these slots\nappears in the toolbar when the writing language is left-to-right (e.g.\nEnglish):\nThe [AppBar] insets its content based on the ambient [MediaQuery]'s padding,\nto avoid system UI intrusions. It's taken care of by [Scaffold] when used in\nthe [Scaffold.appBar] property. When animating an [AppBar], unexpected\n[MediaQuery] changes (as is common in [Hero] animations) may cause the content\nto suddenly jump. Wrap the [AppBar] in a [MediaQuery] widget, and adjust its\npadding such that the animation is smooth.\n![The leading widget is in the top left, the actions are in the top right,\nthe title is between them. The bottom is, naturally, at the bottom, and the\nflexibleSpace is behind all of them.](https://flutter.github.io/assets-for-api-docs/assets/material/app_bar.png)\nIf the [leading] widget is omitted, but the [AppBar] is in a [Scaffold] with\na [Drawer], then a button will be inserted to open the drawer. Otherwise, if\nthe nearest [Navigator] has any previous routes, a [BackButton] is inserted\ninstead. This behavior can be turned off by setting the [automaticallyImplyLeading]\nto false. In that case a null leading widget will result in the middle/title widget\nstretching to start.\n{@tool dartpad}\nThis sample shows an [AppBar] with two simple actions. The first action\nopens a [SnackBar], while the second action navigates to a new page.\n** See code in examples/api/lib/material/app_bar/app_bar.0.dart **\n{@end-tool}\nMaterial Design 3 introduced new types of app bar.\n{@tool dartpad}\nThis sample shows the creation of an [AppBar] widget with the [shadowColor] and\n[scrolledUnderElevation] properties set, as described in:\nhttps://m3.material.io/components/top-app-bar/overview\n** See code in examples/api/lib/material/app_bar/app_bar.1.dart **\n{@end-tool}\n## Troubleshooting\n### Why don't my TextButton actions appear?\nIf the app bar's [actions] contains [TextButton]s, they will not\nbe visible if their foreground (text) color is the same as the\napp bar's background color.\nIn Material v2 (i.e., when [ThemeData.useMaterial3] is false),\nthe default app bar [backgroundColor] is the overall theme's\n[ColorScheme.primary] if the overall theme's brightness is\n[Brightness.light]. Unfortunately this is the same as the default\n[ButtonStyle.foregroundColor] for [TextButton] for light themes.\nIn this case a preferable text button foreground color is\n[ColorScheme.onPrimary], a color that contrasts nicely with\n[ColorScheme.primary]. To remedy the problem, override\n[TextButton.style]:\n{@tool dartpad}\nThis sample shows an [AppBar] with two action buttons with their primary\ncolor set to [ColorScheme.onPrimary].\n** See code in examples/api/lib/material/app_bar/app_bar.2.dart **\n{@end-tool}\n{@tool dartpad}\nThis example shows how to listen to a nested Scrollable's scroll notification\nin a nested scroll view using the [notificationPredicate] property and use it\nto make [scrolledUnderElevation] take effect.\n** See code in examples/api/lib/material/app_bar/app_bar.3.dart **\n{@end-tool}\nSee also:\n* [Scaffold], which displays the [AppBar] in its [Scaffold.appBar] slot.\n* [SliverAppBar], which uses [AppBar] to provide a flexible app bar that\ncan be used in a [CustomScrollView].\n* [TabBar], which is typically placed in the [bottom] slot of the [AppBar]\nif the screen has multiple pages arranged in tabs.\n* [IconButton], which is used with [actions] to show buttons on the app bar.\n* [PopupMenuButton], to show a popup menu on the app bar, via [actions].\n* [FlexibleSpaceBar], which is used with [flexibleSpace] when the app bar\ncan expand and collapse.\n* <https://material.io/design/components/app-bars-top.html>\n* <https://m3.material.io/components/top-app-bar>\n* Cookbook: [Place a floating app bar above a list](https://docs.flutter.dev/cookbook/lists/floating-app-bar)"
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "class AppBar extends StatefulWidget implements PreferredSizeWidget"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`app_bar.dart`/AppBar#`<constructor>`().(backgroundColor)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{Color backgroundColor}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`theme.dart`/Theme#",
      "documentation": [
        "Applies a theme to descendant widgets.\nA theme describes the colors and typographic choices of an application.\n{@youtube 560 315 https://www.youtube.com/watch?v=oTvQDJOBXmM}\nDescendant widgets obtain the current theme's [ThemeData] object using\n[Theme.of]. When a widget uses [Theme.of], it is automatically rebuilt if\nthe theme later changes, so that the changes can be applied.\nThe [Theme] widget implies an [IconTheme] widget, set to the value of the\n[ThemeData.iconTheme] of the [data] for the [Theme].\nSee also:\n* [ThemeData], which describes the actual configuration of a theme.\n* [AnimatedTheme], which animates the [ThemeData] when it changes rather\nthan changing the theme all at once.\n* [MaterialApp], which includes an [AnimatedTheme] widget configured via\nthe [MaterialApp.theme] argument."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "class Theme extends StatelessWidget"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`theme.dart`/Theme#of().",
      "documentation": [
        "The data from the closest [Theme] instance that encloses the given\ncontext.\nIf the given context is enclosed in a [Localizations] widget providing\n[MaterialLocalizations], the returned data is localized according to the\nnearest available [MaterialLocalizations].\nDefaults to [ThemeData.fallback] if there is no [Theme] in the given\nbuild context.\nTypical usage is as follows:\n```dart\n@override\nWidget build(BuildContext context) {\nreturn Text(\n'Example',\nstyle: Theme.of(context).textTheme.titleLarge,\n);\n}\n```\nWhen the [Theme] is actually created in the same `build` function\n(possibly indirectly, e.g. as part of a [MaterialApp]), the `context`\nargument to the `build` function can't be used to find the [Theme] (since\nit's \"above\" the widget being returned). In such cases, the following\ntechnique with a [Builder] can be used to provide a new scope with a\n[BuildContext] that is \"under\" the [Theme]:\n```dart\n@override\nWidget build(BuildContext context) {\nreturn MaterialApp(\ntheme: ThemeData.light(),\nhome: Builder(\n// Create an inner BuildContext so that we can refer to\n// the Theme with Theme.of().\nbuilder: (BuildContext context) {\nreturn Center(\nchild: Text(\n'Example',\nstyle: Theme.of(context).textTheme.titleLarge,\n),\n);\n},\n),\n);\n}\n```"
      ],
      "kind": "Method",
      "signature_documentation": {
        "language": "Dart",
        "text": "ThemeData of(BuildContext context)"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`theme_data.dart`/ThemeData#colorScheme.",
      "documentation": [
        "{@macro flutter.material.color_scheme.ColorScheme}\nThis property was added much later than the theme's set of highly specific\ncolors, like [cardColor], [canvasColor] etc. New components can be defined\nexclusively in terms of [colorScheme]. Existing components will gradually\nmigrate to it, to the extent that is possible without significant\nbackwards compatibility breaks."
      ],
      "kind": "Field",
      "signature_documentation": {
        "language": "Dart",
        "text": "ColorScheme colorScheme"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`color_scheme.dart`/ColorScheme#`<get>inversePrimary`.",
      "documentation": [
        "An accent color used for displaying a highlight color on [inverseSurface]\nbackgrounds, like button text in a SnackBar."
      ],
      "kind": "Property",
      "signature_documentation": {
        "language": "Dart",
        "text": "Color get inversePrimary"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`app_bar.dart`/AppBar#`<constructor>`().(title)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{Widget title}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`text.dart`/Text#",
      "documentation": [
        "A run of text with a single style.\nThe [Text] widget displays a string of text with single style. The string\nmight break across multiple lines or might all be displayed on the same line\ndepending on the layout constraints.\nThe [style] argument is optional. When omitted, the text will use the style\nfrom the closest enclosing [DefaultTextStyle]. If the given style's\n[TextStyle.inherit] property is true (the default), the given style will\nbe merged with the closest enclosing [DefaultTextStyle]. This merging\nbehavior is useful, for example, to make the text bold while using the\ndefault font family and size.\n{@tool snippet}\nThis example shows how to display text using the [Text] widget with the\n[overflow] set to [TextOverflow.ellipsis].\n![If the text overflows, the Text widget displays an ellipsis to trim the overflowing text](https://flutter.github.io/assets-for-api-docs/assets/widgets/text_ellipsis.png)\n```dart\nContainer(\nwidth: 100,\ndecoration: BoxDecoration(border: Border.all()),\nchild: Text(overflow: TextOverflow.ellipsis, 'Hello $_name, how are you?'))\n```\n{@end-tool}\n{@tool snippet}\nSetting [maxLines] to `1` is not equivalent to disabling soft wrapping with\n[softWrap]. This is apparent when using [TextOverflow.fade] as the following\nexamples show.\n![If a second line overflows the Text widget displays a horizontal fade](https://flutter.github.io/assets-for-api-docs/assets/widgets/text_fade_max_lines.png)\n```dart\nText(\noverflow: TextOverflow.fade,\nmaxLines: 1,\n'Hello $_name, how are you?')\n```\nHere soft wrapping is enabled and the [Text] widget tries to wrap the words\n\"how are you?\" to a second line. This is prevented by the [maxLines] value\nof `1`. The result is that a second line overflows and the fade appears in a\nhorizontal direction at the bottom.\n![If a single line overflows the Text widget displays a horizontal fade](https://flutter.github.io/assets-for-api-docs/assets/widgets/text_fade_soft_wrap.png)\n```dart\nText(\noverflow: TextOverflow.fade,\nsoftWrap: false,\n'Hello $_name, how are you?')\n```\nHere soft wrapping is disabled with `softWrap: false` and the [Text] widget\nattempts to display its text in a single unbroken line. The result is that\nthe single line overflows and the fade appears in a vertical direction at\nthe right.\n{@end-tool}\nUsing the [Text.rich] constructor, the [Text] widget can\ndisplay a paragraph with differently styled [TextSpan]s. The sample\nthat follows displays \"Hello beautiful world\" with different styles\nfor each word.\n{@tool snippet}\n![The word \"Hello\" is shown with the default text styles. The word \"beautiful\" is italicized. The word \"world\" is bold.](https://flutter.github.io/assets-for-api-docs/assets/widgets/text_rich.png)\n```dart\nconst Text.rich(\nTextSpan(\ntext: 'Hello', // default text style\nchildren: <TextSpan>[\nTextSpan(text: ' beautiful ', style: TextStyle(fontStyle: FontStyle.italic)),\nTextSpan(text: 'world', style: TextStyle(fontWeight: FontWeight.bold)),\n],\n),\n)\n```\n{@end-tool}\n## Interactivity\nTo make [Text] react to touch events, wrap it in a [GestureDetector] widget\nwith a [GestureDetector.onTap] handler.\nIn a Material Design application, consider using a [TextButton] instead, or\nif that isn't appropriate, at least using an [InkWell] instead of\n[GestureDetector].\nTo make sections of the text interactive, use [RichText] and specify a\n[TapGestureRecognizer] as the [TextSpan.recognizer] of the relevant part of\nthe text.\n## Selection\n[Text] is not selectable by default. To make a [Text] selectable, one can\nwrap a subtree with a [SelectionArea] widget. To exclude a part of a subtree\nunder [SelectionArea] from selection, once can also wrap that part of the\nsubtree with [SelectionContainer.disabled].\n{@tool dartpad}\nThis sample demonstrates how to disable selection for a Text under a\nSelectionArea.\n** See code in examples/api/lib/material/selection_container/selection_container_disabled.0.dart **\n{@end-tool}\nSee also:\n* [RichText], which gives you more control over the text styles.\n* [DefaultTextStyle], which sets default styles for [Text] widgets.\n* [SelectableRegion], which provides an overview of the selection system."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "class Text extends StatelessWidget"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`framework.dart`/State#`<get>widget`.",
      "documentation": [
        "The current configuration.\nA [State] object's configuration is the corresponding [StatefulWidget]\ninstance. This property is initialized by the framework before calling\n[initState]. If the parent updates this location in the tree to a new\nwidget with the same [runtimeType] and [Widget.key] as the current\nconfiguration, the framework will update this property to refer to the new\nwidget and then call [didUpdateWidget], passing the old configuration as\nan argument."
      ],
      "kind": "Property",
      "signature_documentation": {
        "language": "Dart",
        "text": "MyHomePage get widget"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`scaffold.dart`/Scaffold#`<constructor>`().(body)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{Widget body}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`basic.dart`/Center#",
      "documentation": [
        "A widget that centers its child within itself.\nThis widget will be as big as possible if its dimensions are constrained and\n[widthFactor] and [heightFactor] are null. If a dimension is unconstrained\nand the corresponding size factor is null then the widget will match its\nchild's size in that dimension. If a size factor is non-null then the\ncorresponding dimension of this widget will be the product of the child's\ndimension and the size factor. For example if widthFactor is 2.0 then\nthe width of this widget will always be twice its child's width.\nSee also:\n* [Align], which lets you arbitrarily position a child within itself,\nrather than just centering it.\n* [Row], a widget that displays its children in a horizontal array.\n* [Column], a widget that displays its children in a vertical array.\n* [Container], a convenience widget that combines common painting,\npositioning, and sizing widgets.\n* The [catalog of layout widgets](https://flutter.dev/widgets/layout/)."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "class Center extends Align"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`basic.dart`/Center#`<constructor>`().(child)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{Widget child}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`basic.dart`/Column#",
      "documentation": [
        "A widget that displays its children in a vertical array.\nTo cause a child to expand to fill the available vertical space, wrap the\nchild in an [Expanded] widget.\nThe [Column] widget does not scroll (and in general it is considered an error\nto have more children in a [Column] than will fit in the available room). If\nyou have a line of widgets and want them to be able to scroll if there is\ninsufficient room, consider using a [ListView].\nFor a horizontal variant, see [Row].\nIf you only have one child, then consider using [Align] or [Center] to\nposition the child.\n{@tool snippet}\nThis example uses a [Column] to arrange three widgets vertically, the last\nbeing made to fill all the remaining space.\n![Using the Column in this way creates two short lines of text with a large Flutter underneath.](https://flutter.github.io/assets-for-api-docs/assets/widgets/column.png)\n```dart\nconst Column(\nchildren: <Widget>[\nText('Deliver features faster'),\nText('Craft beautiful UIs'),\nExpanded(\nchild: FittedBox(\nchild: FlutterLogo(),\n),\n),\n],\n)\n```\n{@end-tool}\n{@tool snippet}\nIn the sample above, the text and the logo are centered on each line. In the\nfollowing example, the [crossAxisAlignment] is set to\n[CrossAxisAlignment.start], so that the children are left-aligned. The\n[mainAxisSize] is set to [MainAxisSize.min], so that the column shrinks to\nfit the children.\n![](https://flutter.github.io/assets-for-api-docs/assets/widgets/column_properties.png)\n```dart\nColumn(\ncrossAxisAlignment: CrossAxisAlignment.start,\nmainAxisSize: MainAxisSize.min,\nchildren: <Widget>[\nconst Text('We move under cover and we move as one'),\nconst Text('Through the night, we have one shot to live another day'),\nconst Text('We cannot let a stray gunshot give us away'),\nconst Text('We will fight up close, seize the moment and stay in it'),\nconst Text(\"It's either that or meet the business end of a bayonet\"),\nconst Text(\"The code word is 'Rochambeau,' dig me?\"),\nText('Rochambeau!', style: DefaultTextStyle.of(context).style.apply(fontSizeFactor: 2.0)),\n],\n)\n```\n{@end-tool}\n## Troubleshooting\n### When the incoming vertical constraints are unbounded\nWhen a [Column] has one or more [Expanded] or [Flexible] children, and is\nplaced in another [Column], or in a [ListView], or in some other context\nthat does not provide a maximum height constraint for the [Column], you will\nget an exception at runtime saying that there are children with non-zero\nflex but the vertical constraints are unbounded.\nThe problem, as described in the details that accompany that exception, is\nthat using [Flexible] or [Expanded] means that the remaining space after\nlaying out all the other children must be shared equally, but if the\nincoming vertical constraints are unbounded, there is infinite remaining\nspace.\nThe key to solving this problem is usually to determine why the [Column] is\nreceiving unbounded vertical constraints.\nOne common reason for this to happen is that the [Column] has been placed in\nanother [Column] (without using [Expanded] or [Flexible] around the inner\nnested [Column]). When a [Column] lays out its non-flex children (those that\nhave neither [Expanded] or [Flexible] around them), it gives them unbounded\nconstraints so that they can determine their own dimensions (passing\nunbounded constraints usually signals to the child that it should\nshrink-wrap its contents). The solution in this case is typically to just\nwrap the inner column in an [Expanded] to indicate that it should take the\nremaining space of the outer column, rather than being allowed to take any\namount of room it desires.\nAnother reason for this message to be displayed is nesting a [Column] inside\na [ListView] or other vertical scrollable. In that scenario, there really is\ninfinite vertical space (the whole point of a vertical scrolling list is to\nallow infinite space vertically). In such scenarios, it is usually worth\nexamining why the inner [Column] should have an [Expanded] or [Flexible]\nchild: what size should the inner children really be? The solution in this\ncase is typically to remove the [Expanded] or [Flexible] widgets from around\nthe inner children.\n{@youtube 560 315 https://www.youtube.com/watch?v=jckqXR5CrPI}\nFor more discussion about constraints, see [BoxConstraints].\n### The yellow and black striped banner\nWhen the contents of a [Column] exceed the amount of space available, the\n[Column] overflows, and the contents are clipped. In debug mode, a yellow\nand black striped bar is rendered at the overflowing edge to indicate the\nproblem, and a message is printed below the [Column] saying how much\noverflow was detected.\nThe usual solution is to use a [ListView] rather than a [Column], to enable\nthe contents to scroll when vertical space is limited.\n## Layout algorithm\n_This section describes how a [Column] is rendered by the framework._\n_See [BoxConstraints] for an introduction to box layout models._\nLayout for a [Column] proceeds in six steps:\n1. Layout each child with a null or zero flex factor (e.g., those that are\nnot [Expanded]) with unbounded vertical constraints and the incoming\nhorizontal constraints. If the [crossAxisAlignment] is\n[CrossAxisAlignment.stretch], instead use tight horizontal constraints\nthat match the incoming max width.\n2. Divide the remaining vertical space among the children with non-zero\nflex factors (e.g., those that are [Expanded]) according to their flex\nfactor. For example, a child with a flex factor of 2.0 will receive twice\nthe amount of vertical space as a child with a flex factor of 1.0.\n3. Layout each of the remaining children with the same horizontal\nconstraints as in step 1, but instead of using unbounded vertical\nconstraints, use vertical constraints based on the amount of space\nallocated in step 2. Children with [Flexible.fit] properties that are\n[FlexFit.tight] are given tight constraints (i.e., forced to fill the\nallocated space), and children with [Flexible.fit] properties that are\n[FlexFit.loose] are given loose constraints (i.e., not forced to fill the\nallocated space).\n4. The width of the [Column] is the maximum width of the children (which\nwill always satisfy the incoming horizontal constraints).\n5. The height of the [Column] is determined by the [mainAxisSize] property.\nIf the [mainAxisSize] property is [MainAxisSize.max], then the height of\nthe [Column] is the max height of the incoming constraints. If the\n[mainAxisSize] property is [MainAxisSize.min], then the height of the\n[Column] is the sum of heights of the children (subject to the incoming\nconstraints).\n6. Determine the position for each child according to the\n[mainAxisAlignment] and the [crossAxisAlignment]. For example, if the\n[mainAxisAlignment] is [MainAxisAlignment.spaceBetween], any vertical\nspace that has not been allocated to children is divided evenly and\nplaced between the children.\nSee also:\n* [Row], for a horizontal equivalent.\n* [Flex], if you don't know in advance if you want a horizontal or vertical\narrangement.\n* [Expanded], to indicate children that should take all the remaining room.\n* [Flexible], to indicate children that should share the remaining room but\nthat may size smaller (leaving some remaining room unused).\n* [SingleChildScrollView], whose documentation discusses some ways to\nuse a [Column] inside a scrolling container.\n* [Spacer], a widget that takes up space proportional to its flex value.\n* The [catalog of layout widgets](https://flutter.dev/widgets/layout/)."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "class Column extends Flex"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`basic.dart`/Column#`<constructor>`().(mainAxisAlignment)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/rendering/`flex.dart`/MainAxisAlignment#",
      "documentation": [
        "How the children should be placed along the main axis in a flex layout.\nSee also:\n* [Column], [Row], and [Flex], the flex widgets.\n* [RenderFlex], the flex render object."
      ],
      "kind": "Enum",
      "signature_documentation": {
        "language": "Dart",
        "text": "enum MainAxisAlignment"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/rendering/`flex.dart`/MainAxisAlignment#center.",
      "documentation": [
        "Place the children as close to the middle of the main axis as possible."
      ],
      "kind": "Field",
      "signature_documentation": {
        "language": "Dart",
        "text": "MainAxisAlignment center"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`basic.dart`/Column#`<constructor>`().(children)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{List<Widget> children = const <Widget>[]}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`text.dart`/Text#`<constructor>`().(style)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{TextStyle style}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`theme_data.dart`/ThemeData#textTheme.",
      "documentation": [
        "Text with a color that contrasts with the card and canvas colors."
      ],
      "kind": "Field",
      "signature_documentation": {
        "language": "Dart",
        "text": "TextTheme textTheme"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`text_theme.dart`/TextTheme#headlineMedium.",
      "documentation": [
        "Middle size of the headline styles.\nHeadline styles are smaller than display styles. They're best-suited for\nshort, high-emphasis text on smaller screens."
      ],
      "kind": "Field",
      "signature_documentation": {
        "language": "Dart",
        "text": "TextStyle headlineMedium"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`scaffold.dart`/Scaffold#`<constructor>`().(floatingActionButton)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{Widget floatingActionButton}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`floating_action_button.dart`/FloatingActionButton#",
      "documentation": [
        "A Material Design floating action button.\nA floating action button is a circular icon button that hovers over content\nto promote a primary action in the application. Floating action buttons are\nmost commonly used in the [Scaffold.floatingActionButton] field.\n{@youtube 560 315 https://www.youtube.com/watch?v=2uaoEDOgk_I}\nUse at most a single floating action button per screen. Floating action\nbuttons should be used for positive actions such as \"create\", \"share\", or\n\"navigate\". (If more than one floating action button is used within a\n[Route], then make sure that each button has a unique [heroTag], otherwise\nan exception will be thrown.)\nIf the [onPressed] callback is null, then the button will be disabled and\nwill not react to touch. It is highly discouraged to disable a floating\naction button as there is no indication to the user that the button is\ndisabled. Consider changing the [backgroundColor] if disabling the floating\naction button.\n{@tool dartpad}\nThis example shows a [FloatingActionButton] in its usual position within a\n[Scaffold]. Pressing the button cycles it through a few variations in its\n[foregroundColor], [backgroundColor], and [shape]. The button automatically\nanimates its segue from one set of visual parameters to another.\n** See code in examples/api/lib/material/floating_action_button/floating_action_button.0.dart **\n{@end-tool}\n{@tool dartpad}\nThis sample shows all the variants of [FloatingActionButton] widget as\ndescribed in: https://m3.material.io/components/floating-action-button/overview.\n** See code in examples/api/lib/material/floating_action_button/floating_action_button.1.dart **\n{@end-tool}\n{@tool dartpad}\nThis sample shows [FloatingActionButton] with additional color mappings as\ndescribed in: https://m3.material.io/components/floating-action-button/overview.\n** See code in examples/api/lib/material/floating_action_button/floating_action_button.2.dart **\n{@end-tool}\nSee also:\n* [Scaffold], in which floating action buttons typically live.\n* [ElevatedButton], a filled button whose material elevates when pressed.\n* <https://material.io/design/components/buttons-floating-action-button.html>\n* <https://m3.material.io/components/floating-action-button>"
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "class FloatingActionButton extends StatelessWidget"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`floating_action_button.dart`/FloatingActionButton#`<constructor>`().(onPressed)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{required void Function() onPressed}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`floating_action_button.dart`/FloatingActionButton#`<constructor>`().(tooltip)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{String tooltip}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/material/`floating_action_button.dart`/FloatingActionButton#`<constructor>`().(child)",
      "kind": "Parameter",
      "signature_documentation": {
        "language": "Dart",
        "text": "{Widget child}"
      }
    },
    {
      "symbol": "scip-dart pub flutter . lib/src/widgets/`icon.dart`/Icon#",
      "documentation": [
        "A graphical icon widget drawn with a glyph from a font described in\nan [IconData] such as material's predefined [IconData]s in [Icons].\nIcons are not interactive. For an interactive icon, consider material's\n[IconButton].\nThere must be an ambient [Directionality] widget when using [Icon].\nTypically this is introduced automatically by the [WidgetsApp] or\n[MaterialApp].\nThis widget assumes that the rendered icon is squared. Non-squared icons may\nrender incorrectly.\n{@tool snippet}\nThis example shows how to create a [Row] of [Icon]s in different colors and\nsizes. The first [Icon] uses a [semanticLabel] to announce in accessibility\nmodes like TalkBack and VoiceOver.\n![The following code snippet would generate a row of icons consisting of a pink heart, a green musical note, and a blue umbrella, each progressively bigger than the last.](https://flutter.github.io/assets-for-api-docs/assets/widgets/icon.png)\n```dart\nconst Row(\nmainAxisAlignment: MainAxisAlignment.spaceAround,\nchildren: <Widget>[\nIcon(\nIcons.favorite,\ncolor: Colors.pink,\nsize: 24.0,\nsemanticLabel: 'Text to announce in accessibility modes',\n),\nIcon(\nIcons.audiotrack,\ncolor: Colors.green,\nsize: 30.0,\n),\nIcon(\nIcons.beach_access,\ncolor: Colors.blue,\nsize: 36.0,\n),\n],\n)\n```\n{@end-tool}\nSee also:\n* [IconButton], for interactive icons.\n* [Icons], for the list of available Material Icons for use with this class.\n* [IconTheme], which provides ambient configuration for icons.\n* [ImageIcon], for showing icons from [AssetImage]s or other [ImageProvider]s."
      ],
      "kind": "Class",
      "signature_documentation": {
        "language": "Dart",
        "text": "class Icon extends StatelessWidget"
      }
    }
  ]
}
